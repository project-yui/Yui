// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.32.1
// source: pic_upload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "nt.pic_upload";

export interface ReqUploadGroupPicPrepare {
  head: UploadHead | undefined;
  body: UploadBody | undefined;
}

export interface UploadHead {
  field1: UploadHeadField1 | undefined;
  field2: UploadHeadField2 | undefined;
  field3: UploadHeadField3 | undefined;
}

export interface UploadHeadField1 {
  /** group:3 */
  field1: number;
  /** group:100 */
  field2: number;
}

export interface UploadHeadField2 {
  /** group:2 */
  field101?:
    | number
    | undefined;
  /** group:1 */
  field102?:
    | number
    | undefined;
  /** group:0 */
  field103?:
    | number
    | undefined;
  /** group:2 */
  field200?: number | undefined;
  peerInfo: PeerInfo | undefined;
}

export interface UploadHeadField3 {
  /** group:2 */
  field1: number;
}

export interface UploadBody {
  field1: UploadBodyField1[];
  field2?: number | undefined;
  field3?: number | undefined;
  field4?: number | undefined;
  field5?:
    | number
    | undefined;
  /** TODO: 6 */
  field6: UploadBodyField6 | undefined;
  field7?: number | undefined;
  field8?: number | undefined;
  field9?: Uint8Array | undefined;
}

export interface UploadBodyField6 {
  field1: UploadBodyField61 | undefined;
  field2: UploadBodyField62 | undefined;
  field3: UploadBodyField63 | undefined;
  field10?: number | undefined;
}

export interface UploadBodyField61 {
  filed1?: number | undefined;
  field2?: string | undefined;
  field12: UploadBodyField6112 | undefined;
}

export interface UploadBodyField6112 {
  field1?: number | undefined;
  field3?: number | undefined;
  field4?: number | undefined;
  field9?: string | undefined;
  field10?: number | undefined;
  field12?: string | undefined;
  field18?: string | undefined;
  field19?: string | undefined;
  field21: UploadBodyField611221 | undefined;
  field31?: string | undefined;
}

export interface UploadBodyField611221 {
  field1?: number | undefined;
  field2?: string | undefined;
  field3?: number | undefined;
  field4?: number | undefined;
  field5?: number | undefined;
  field7?: string | undefined;
}

export interface UploadBodyField62 {
  field3?: string | undefined;
}

export interface UploadBodyField63 {
  field11?: string | undefined;
  field12?: string | undefined;
}

export interface UploadBodyField1 {
  imageInfo: ImageInfo | undefined;
  field2?: number | undefined;
}

export interface PeerInfo {
  /** 群号 */
  groupCode: number;
}

export interface ImageInfo {
  /** 字节大小 */
  picSize: number;
  /** 小写md5 */
  picMd5: string;
  /** 文件sha1 */
  sha1: string;
  /** 大写MD5.png */
  fileName: string;
  field5?: ImageInfoField5 | undefined;
  picWidth: number;
  picHeight: number;
  /** group:0 */
  field8?:
    | number
    | undefined;
  /** group:1 */
  field9?: number | undefined;
}

export interface ImageInfoField5 {
  /** group:1 */
  field1?:
    | number
    | undefined;
  /** group:1001 */
  field2?:
    | number
    | undefined;
  /** group:0 */
  field3?:
    | number
    | undefined;
  /** group:0 */
  field4?: number | undefined;
}

export interface RspUploadGroupPicPrepare {
  head: RspHead | undefined;
  body: RspBody | undefined;
}

export interface RspHead {
  field1:
    | UploadHeadField1
    | undefined;
  /** 成功：success */
  message: string;
}

export interface RspBody {
  field1: string;
  field2: number;
  ipInfo: IPInfo[];
  ipv6Info: IPv6Info[];
  field6: RspBodyField6 | undefined;
  field7: RspBodyField7 | undefined;
  domain: string;
  uploadIpList: IPAddress[];
  field15: IPv6Address[];
}

export interface RspBodyField6 {
  field1: RspBodyField61 | undefined;
  field2: RspBodyField62 | undefined;
}

export interface RspBodyField61 {
  field1: RspBodyField611 | undefined;
  downloadInfo: DownloadInfo | undefined;
  field5?: number | undefined;
  field6: RspBodyField616 | undefined;
}

export interface RspBodyField611 {
  imageInfo: ImageInfo | undefined;
  fileId?: string | undefined;
  field3?: number | undefined;
  timestamp?: number | undefined;
  field5?: number | undefined;
  field6?: number | undefined;
  field7?: number | undefined;
}

export interface DownloadInfo {
  path: string;
  option: SpecOption | undefined;
  domain: string;
}

export interface SpecOption {
  spec1: string;
  spec2: string;
  spec3: string;
}

export interface RspBodyField616 {
  field2: Uint8Array;
}

export interface RspBodyField62 {
  field1: RspBodyField621 | undefined;
  field2: RspBodyField622 | undefined;
  field3: RspBodyField623 | undefined;
  field10?: number | undefined;
}

export interface RspBodyField621 {
  field1?: number | undefined;
  field2?: Uint8Array | undefined;
  field12: RspBodyField62112 | undefined;
  field1001?: number | undefined;
  field1002?: number | undefined;
  field1003?: number | undefined;
}

export interface RspBodyField622 {
  field3?: Uint8Array | undefined;
}

export interface RspBodyField623 {
  field11?: Uint8Array | undefined;
  field12?: Uint8Array | undefined;
}

export interface RspBodyField62112 {
  field1?: number | undefined;
  field3?: number | undefined;
  field4?: number | undefined;
  field9?: Uint8Array | undefined;
  field10?: number | undefined;
  field12?: Uint8Array | undefined;
  field18?: Uint8Array | undefined;
  field19?: Uint8Array | undefined;
  field21: RspBodyField6211221 | undefined;
  rkey: string;
  field31?: string | undefined;
}

export interface RspBodyField6211221 {
  field1: number;
  field2: string;
  field3: number;
  field4: number;
  field5: number;
  field7: string;
}

export interface RspBodyField7 {
  field1: number;
  field3: RspBodyField73 | undefined;
}

export interface RspBodyField73 {
  field1: number;
  field4: number;
}

export interface IPInfo {
  ip1: number;
  port1: number;
  ip2: number;
  port2: number;
  field5: number;
}

export interface IPAddress {
  ip: number;
  port: number;
}

export interface IPv6Address {
  ip: Uint8Array;
  port: number;
}

export interface IPv6Info {
  ip: Uint8Array;
  port: number;
  field3: string;
  field5: number;
}

export interface PicHighwayUploadExtendInfo {
  fileId: string;
  token2: string;
  field3: number;
  field4: PicHighwayUploadExtendInfoField4 | undefined;
  field5: PicHighwayUploadExtendInfoField5 | undefined;
  field6: RspBodyField61 | undefined;
  field10: number;
  chunkInfo: ChunkInfo | undefined;
}

export interface PicHighwayUploadExtendInfoField4 {
  field4: number;
}

export interface PicHighwayUploadExtendInfoField5 {
  ipList: IPAddressInfo[];
}

export interface PicHighwayUploadExtendInfoField66 {
  field2: Uint8Array;
}

export interface ChunkInfo {
  chunkSha1: Uint8Array[];
}

export interface IPAddressInfo {
  ip: IPExtendInfo | undefined;
  port: number;
}

export interface IPExtendInfo {
  type: number;
  ip: string;
}

function createBaseReqUploadGroupPicPrepare(): ReqUploadGroupPicPrepare {
  return { head: undefined, body: undefined };
}

export const ReqUploadGroupPicPrepare: MessageFns<ReqUploadGroupPicPrepare> = {
  encode(message: ReqUploadGroupPicPrepare, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      UploadHead.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UploadBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqUploadGroupPicPrepare {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqUploadGroupPicPrepare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = UploadHead.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UploadBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqUploadGroupPicPrepare {
    return {
      head: isSet(object.head) ? UploadHead.fromJSON(object.head) : undefined,
      body: isSet(object.body) ? UploadBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: ReqUploadGroupPicPrepare): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = UploadHead.toJSON(message.head);
    }
    if (message.body !== undefined) {
      obj.body = UploadBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqUploadGroupPicPrepare>, I>>(base?: I): ReqUploadGroupPicPrepare {
    return ReqUploadGroupPicPrepare.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqUploadGroupPicPrepare>, I>>(object: I): ReqUploadGroupPicPrepare {
    const message = createBaseReqUploadGroupPicPrepare();
    message.head = (object.head !== undefined && object.head !== null)
      ? UploadHead.fromPartial(object.head)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UploadBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUploadHead(): UploadHead {
  return { field1: undefined, field2: undefined, field3: undefined };
}

export const UploadHead: MessageFns<UploadHead> = {
  encode(message: UploadHead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      UploadHeadField1.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      UploadHeadField2.encode(message.field2, writer.uint32(18).fork()).join();
    }
    if (message.field3 !== undefined) {
      UploadHeadField3.encode(message.field3, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadHead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadHead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = UploadHeadField1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = UploadHeadField2.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = UploadHeadField3.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadHead {
    return {
      field1: isSet(object.field1) ? UploadHeadField1.fromJSON(object.field1) : undefined,
      field2: isSet(object.field2) ? UploadHeadField2.fromJSON(object.field2) : undefined,
      field3: isSet(object.field3) ? UploadHeadField3.fromJSON(object.field3) : undefined,
    };
  },

  toJSON(message: UploadHead): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = UploadHeadField1.toJSON(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = UploadHeadField2.toJSON(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = UploadHeadField3.toJSON(message.field3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadHead>, I>>(base?: I): UploadHead {
    return UploadHead.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadHead>, I>>(object: I): UploadHead {
    const message = createBaseUploadHead();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? UploadHeadField1.fromPartial(object.field1)
      : undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? UploadHeadField2.fromPartial(object.field2)
      : undefined;
    message.field3 = (object.field3 !== undefined && object.field3 !== null)
      ? UploadHeadField3.fromPartial(object.field3)
      : undefined;
    return message;
  },
};

function createBaseUploadHeadField1(): UploadHeadField1 {
  return { field1: 0, field2: 0 };
}

export const UploadHeadField1: MessageFns<UploadHeadField1> = {
  encode(message: UploadHeadField1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== 0) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field2 !== 0) {
      writer.uint32(16).uint32(message.field2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadHeadField1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadHeadField1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadHeadField1 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : 0,
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : 0,
    };
  },

  toJSON(message: UploadHeadField1): unknown {
    const obj: any = {};
    if (message.field1 !== 0) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== 0) {
      obj.field2 = Math.round(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadHeadField1>, I>>(base?: I): UploadHeadField1 {
    return UploadHeadField1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadHeadField1>, I>>(object: I): UploadHeadField1 {
    const message = createBaseUploadHeadField1();
    message.field1 = object.field1 ?? 0;
    message.field2 = object.field2 ?? 0;
    return message;
  },
};

function createBaseUploadHeadField2(): UploadHeadField2 {
  return { field101: undefined, field102: undefined, field103: undefined, field200: undefined, peerInfo: undefined };
}

export const UploadHeadField2: MessageFns<UploadHeadField2> = {
  encode(message: UploadHeadField2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field101 !== undefined) {
      writer.uint32(808).uint32(message.field101);
    }
    if (message.field102 !== undefined) {
      writer.uint32(816).uint32(message.field102);
    }
    if (message.field103 !== undefined) {
      writer.uint32(824).uint32(message.field103);
    }
    if (message.field200 !== undefined) {
      writer.uint32(1600).uint32(message.field200);
    }
    if (message.peerInfo !== undefined) {
      PeerInfo.encode(message.peerInfo, writer.uint32(1618).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadHeadField2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadHeadField2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 101: {
          if (tag !== 808) {
            break;
          }

          message.field101 = reader.uint32();
          continue;
        }
        case 102: {
          if (tag !== 816) {
            break;
          }

          message.field102 = reader.uint32();
          continue;
        }
        case 103: {
          if (tag !== 824) {
            break;
          }

          message.field103 = reader.uint32();
          continue;
        }
        case 200: {
          if (tag !== 1600) {
            break;
          }

          message.field200 = reader.uint32();
          continue;
        }
        case 202: {
          if (tag !== 1618) {
            break;
          }

          message.peerInfo = PeerInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadHeadField2 {
    return {
      field101: isSet(object.field101) ? globalThis.Number(object.field101) : undefined,
      field102: isSet(object.field102) ? globalThis.Number(object.field102) : undefined,
      field103: isSet(object.field103) ? globalThis.Number(object.field103) : undefined,
      field200: isSet(object.field200) ? globalThis.Number(object.field200) : undefined,
      peerInfo: isSet(object.peerInfo) ? PeerInfo.fromJSON(object.peerInfo) : undefined,
    };
  },

  toJSON(message: UploadHeadField2): unknown {
    const obj: any = {};
    if (message.field101 !== undefined) {
      obj.field101 = Math.round(message.field101);
    }
    if (message.field102 !== undefined) {
      obj.field102 = Math.round(message.field102);
    }
    if (message.field103 !== undefined) {
      obj.field103 = Math.round(message.field103);
    }
    if (message.field200 !== undefined) {
      obj.field200 = Math.round(message.field200);
    }
    if (message.peerInfo !== undefined) {
      obj.peerInfo = PeerInfo.toJSON(message.peerInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadHeadField2>, I>>(base?: I): UploadHeadField2 {
    return UploadHeadField2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadHeadField2>, I>>(object: I): UploadHeadField2 {
    const message = createBaseUploadHeadField2();
    message.field101 = object.field101 ?? undefined;
    message.field102 = object.field102 ?? undefined;
    message.field103 = object.field103 ?? undefined;
    message.field200 = object.field200 ?? undefined;
    message.peerInfo = (object.peerInfo !== undefined && object.peerInfo !== null)
      ? PeerInfo.fromPartial(object.peerInfo)
      : undefined;
    return message;
  },
};

function createBaseUploadHeadField3(): UploadHeadField3 {
  return { field1: 0 };
}

export const UploadHeadField3: MessageFns<UploadHeadField3> = {
  encode(message: UploadHeadField3, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== 0) {
      writer.uint32(8).uint32(message.field1);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadHeadField3 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadHeadField3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadHeadField3 {
    return { field1: isSet(object.field1) ? globalThis.Number(object.field1) : 0 };
  },

  toJSON(message: UploadHeadField3): unknown {
    const obj: any = {};
    if (message.field1 !== 0) {
      obj.field1 = Math.round(message.field1);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadHeadField3>, I>>(base?: I): UploadHeadField3 {
    return UploadHeadField3.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadHeadField3>, I>>(object: I): UploadHeadField3 {
    const message = createBaseUploadHeadField3();
    message.field1 = object.field1 ?? 0;
    return message;
  },
};

function createBaseUploadBody(): UploadBody {
  return {
    field1: [],
    field2: undefined,
    field3: undefined,
    field4: undefined,
    field5: undefined,
    field6: undefined,
    field7: undefined,
    field8: undefined,
    field9: undefined,
  };
}

export const UploadBody: MessageFns<UploadBody> = {
  encode(message: UploadBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.field1) {
      UploadBodyField1.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      writer.uint32(16).uint32(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).uint32(message.field4);
    }
    if (message.field5 !== undefined) {
      writer.uint32(40).uint32(message.field5);
    }
    if (message.field6 !== undefined) {
      UploadBodyField6.encode(message.field6, writer.uint32(50).fork()).join();
    }
    if (message.field7 !== undefined) {
      writer.uint32(56).uint32(message.field7);
    }
    if (message.field8 !== undefined) {
      writer.uint32(64).uint32(message.field8);
    }
    if (message.field9 !== undefined) {
      writer.uint32(74).bytes(message.field9);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1.push(UploadBodyField1.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = UploadBodyField6.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.field7 = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.field8 = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.field9 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBody {
    return {
      field1: globalThis.Array.isArray(object?.field1)
        ? object.field1.map((e: any) => UploadBodyField1.fromJSON(e))
        : [],
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : undefined,
      field6: isSet(object.field6) ? UploadBodyField6.fromJSON(object.field6) : undefined,
      field7: isSet(object.field7) ? globalThis.Number(object.field7) : undefined,
      field8: isSet(object.field8) ? globalThis.Number(object.field8) : undefined,
      field9: isSet(object.field9) ? bytesFromBase64(object.field9) : undefined,
    };
  },

  toJSON(message: UploadBody): unknown {
    const obj: any = {};
    if (message.field1?.length) {
      obj.field1 = message.field1.map((e) => UploadBodyField1.toJSON(e));
    }
    if (message.field2 !== undefined) {
      obj.field2 = Math.round(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field5 !== undefined) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field6 !== undefined) {
      obj.field6 = UploadBodyField6.toJSON(message.field6);
    }
    if (message.field7 !== undefined) {
      obj.field7 = Math.round(message.field7);
    }
    if (message.field8 !== undefined) {
      obj.field8 = Math.round(message.field8);
    }
    if (message.field9 !== undefined) {
      obj.field9 = base64FromBytes(message.field9);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBody>, I>>(base?: I): UploadBody {
    return UploadBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBody>, I>>(object: I): UploadBody {
    const message = createBaseUploadBody();
    message.field1 = object.field1?.map((e) => UploadBodyField1.fromPartial(e)) || [];
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    message.field5 = object.field5 ?? undefined;
    message.field6 = (object.field6 !== undefined && object.field6 !== null)
      ? UploadBodyField6.fromPartial(object.field6)
      : undefined;
    message.field7 = object.field7 ?? undefined;
    message.field8 = object.field8 ?? undefined;
    message.field9 = object.field9 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField6(): UploadBodyField6 {
  return { field1: undefined, field2: undefined, field3: undefined, field10: undefined };
}

export const UploadBodyField6: MessageFns<UploadBodyField6> = {
  encode(message: UploadBodyField6, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      UploadBodyField61.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      UploadBodyField62.encode(message.field2, writer.uint32(18).fork()).join();
    }
    if (message.field3 !== undefined) {
      UploadBodyField63.encode(message.field3, writer.uint32(26).fork()).join();
    }
    if (message.field10 !== undefined) {
      writer.uint32(80).uint32(message.field10);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField6 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = UploadBodyField61.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = UploadBodyField62.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = UploadBodyField63.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField6 {
    return {
      field1: isSet(object.field1) ? UploadBodyField61.fromJSON(object.field1) : undefined,
      field2: isSet(object.field2) ? UploadBodyField62.fromJSON(object.field2) : undefined,
      field3: isSet(object.field3) ? UploadBodyField63.fromJSON(object.field3) : undefined,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : undefined,
    };
  },

  toJSON(message: UploadBodyField6): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = UploadBodyField61.toJSON(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = UploadBodyField62.toJSON(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = UploadBodyField63.toJSON(message.field3);
    }
    if (message.field10 !== undefined) {
      obj.field10 = Math.round(message.field10);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField6>, I>>(base?: I): UploadBodyField6 {
    return UploadBodyField6.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField6>, I>>(object: I): UploadBodyField6 {
    const message = createBaseUploadBodyField6();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? UploadBodyField61.fromPartial(object.field1)
      : undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? UploadBodyField62.fromPartial(object.field2)
      : undefined;
    message.field3 = (object.field3 !== undefined && object.field3 !== null)
      ? UploadBodyField63.fromPartial(object.field3)
      : undefined;
    message.field10 = object.field10 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField61(): UploadBodyField61 {
  return { filed1: undefined, field2: undefined, field12: undefined };
}

export const UploadBodyField61: MessageFns<UploadBodyField61> = {
  encode(message: UploadBodyField61, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filed1 !== undefined) {
      writer.uint32(8).uint32(message.filed1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(18).string(message.field2);
    }
    if (message.field12 !== undefined) {
      UploadBodyField6112.encode(message.field12, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField61 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField61();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.filed1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = UploadBodyField6112.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField61 {
    return {
      filed1: isSet(object.filed1) ? globalThis.Number(object.filed1) : undefined,
      field2: isSet(object.field2) ? globalThis.String(object.field2) : undefined,
      field12: isSet(object.field12) ? UploadBodyField6112.fromJSON(object.field12) : undefined,
    };
  },

  toJSON(message: UploadBodyField61): unknown {
    const obj: any = {};
    if (message.filed1 !== undefined) {
      obj.filed1 = Math.round(message.filed1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = message.field2;
    }
    if (message.field12 !== undefined) {
      obj.field12 = UploadBodyField6112.toJSON(message.field12);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField61>, I>>(base?: I): UploadBodyField61 {
    return UploadBodyField61.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField61>, I>>(object: I): UploadBodyField61 {
    const message = createBaseUploadBodyField61();
    message.filed1 = object.filed1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field12 = (object.field12 !== undefined && object.field12 !== null)
      ? UploadBodyField6112.fromPartial(object.field12)
      : undefined;
    return message;
  },
};

function createBaseUploadBodyField6112(): UploadBodyField6112 {
  return {
    field1: undefined,
    field3: undefined,
    field4: undefined,
    field9: undefined,
    field10: undefined,
    field12: undefined,
    field18: undefined,
    field19: undefined,
    field21: undefined,
    field31: undefined,
  };
}

export const UploadBodyField6112: MessageFns<UploadBodyField6112> = {
  encode(message: UploadBodyField6112, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).uint32(message.field4);
    }
    if (message.field9 !== undefined) {
      writer.uint32(74).string(message.field9);
    }
    if (message.field10 !== undefined) {
      writer.uint32(80).uint32(message.field10);
    }
    if (message.field12 !== undefined) {
      writer.uint32(98).string(message.field12);
    }
    if (message.field18 !== undefined) {
      writer.uint32(146).string(message.field18);
    }
    if (message.field19 !== undefined) {
      writer.uint32(154).string(message.field19);
    }
    if (message.field21 !== undefined) {
      UploadBodyField611221.encode(message.field21, writer.uint32(170).fork()).join();
    }
    if (message.field31 !== undefined) {
      writer.uint32(250).string(message.field31);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField6112 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField6112();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.field9 = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.field18 = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.field19 = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.field21 = UploadBodyField611221.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.field31 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField6112 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
      field9: isSet(object.field9) ? globalThis.String(object.field9) : undefined,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : undefined,
      field12: isSet(object.field12) ? globalThis.String(object.field12) : undefined,
      field18: isSet(object.field18) ? globalThis.String(object.field18) : undefined,
      field19: isSet(object.field19) ? globalThis.String(object.field19) : undefined,
      field21: isSet(object.field21) ? UploadBodyField611221.fromJSON(object.field21) : undefined,
      field31: isSet(object.field31) ? globalThis.String(object.field31) : undefined,
    };
  },

  toJSON(message: UploadBodyField6112): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field9 !== undefined) {
      obj.field9 = message.field9;
    }
    if (message.field10 !== undefined) {
      obj.field10 = Math.round(message.field10);
    }
    if (message.field12 !== undefined) {
      obj.field12 = message.field12;
    }
    if (message.field18 !== undefined) {
      obj.field18 = message.field18;
    }
    if (message.field19 !== undefined) {
      obj.field19 = message.field19;
    }
    if (message.field21 !== undefined) {
      obj.field21 = UploadBodyField611221.toJSON(message.field21);
    }
    if (message.field31 !== undefined) {
      obj.field31 = message.field31;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField6112>, I>>(base?: I): UploadBodyField6112 {
    return UploadBodyField6112.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField6112>, I>>(object: I): UploadBodyField6112 {
    const message = createBaseUploadBodyField6112();
    message.field1 = object.field1 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    message.field9 = object.field9 ?? undefined;
    message.field10 = object.field10 ?? undefined;
    message.field12 = object.field12 ?? undefined;
    message.field18 = object.field18 ?? undefined;
    message.field19 = object.field19 ?? undefined;
    message.field21 = (object.field21 !== undefined && object.field21 !== null)
      ? UploadBodyField611221.fromPartial(object.field21)
      : undefined;
    message.field31 = object.field31 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField611221(): UploadBodyField611221 {
  return {
    field1: undefined,
    field2: undefined,
    field3: undefined,
    field4: undefined,
    field5: undefined,
    field7: undefined,
  };
}

export const UploadBodyField611221: MessageFns<UploadBodyField611221> = {
  encode(message: UploadBodyField611221, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(18).string(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).uint32(message.field4);
    }
    if (message.field5 !== undefined) {
      writer.uint32(40).uint32(message.field5);
    }
    if (message.field7 !== undefined) {
      writer.uint32(58).string(message.field7);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField611221 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField611221();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.field7 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField611221 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field2: isSet(object.field2) ? globalThis.String(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : undefined,
      field7: isSet(object.field7) ? globalThis.String(object.field7) : undefined,
    };
  },

  toJSON(message: UploadBodyField611221): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = message.field2;
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field5 !== undefined) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field7 !== undefined) {
      obj.field7 = message.field7;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField611221>, I>>(base?: I): UploadBodyField611221 {
    return UploadBodyField611221.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField611221>, I>>(object: I): UploadBodyField611221 {
    const message = createBaseUploadBodyField611221();
    message.field1 = object.field1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    message.field5 = object.field5 ?? undefined;
    message.field7 = object.field7 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField62(): UploadBodyField62 {
  return { field3: undefined };
}

export const UploadBodyField62: MessageFns<UploadBodyField62> = {
  encode(message: UploadBodyField62, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field3 !== undefined) {
      writer.uint32(26).string(message.field3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField62 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField62();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField62 {
    return { field3: isSet(object.field3) ? globalThis.String(object.field3) : undefined };
  },

  toJSON(message: UploadBodyField62): unknown {
    const obj: any = {};
    if (message.field3 !== undefined) {
      obj.field3 = message.field3;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField62>, I>>(base?: I): UploadBodyField62 {
    return UploadBodyField62.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField62>, I>>(object: I): UploadBodyField62 {
    const message = createBaseUploadBodyField62();
    message.field3 = object.field3 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField63(): UploadBodyField63 {
  return { field11: undefined, field12: undefined };
}

export const UploadBodyField63: MessageFns<UploadBodyField63> = {
  encode(message: UploadBodyField63, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field11 !== undefined) {
      writer.uint32(90).string(message.field11);
    }
    if (message.field12 !== undefined) {
      writer.uint32(98).string(message.field12);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField63 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField63();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.field11 = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField63 {
    return {
      field11: isSet(object.field11) ? globalThis.String(object.field11) : undefined,
      field12: isSet(object.field12) ? globalThis.String(object.field12) : undefined,
    };
  },

  toJSON(message: UploadBodyField63): unknown {
    const obj: any = {};
    if (message.field11 !== undefined) {
      obj.field11 = message.field11;
    }
    if (message.field12 !== undefined) {
      obj.field12 = message.field12;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField63>, I>>(base?: I): UploadBodyField63 {
    return UploadBodyField63.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField63>, I>>(object: I): UploadBodyField63 {
    const message = createBaseUploadBodyField63();
    message.field11 = object.field11 ?? undefined;
    message.field12 = object.field12 ?? undefined;
    return message;
  },
};

function createBaseUploadBodyField1(): UploadBodyField1 {
  return { imageInfo: undefined, field2: undefined };
}

export const UploadBodyField1: MessageFns<UploadBodyField1> = {
  encode(message: UploadBodyField1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageInfo !== undefined) {
      ImageInfo.encode(message.imageInfo, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      writer.uint32(16).uint32(message.field2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadBodyField1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadBodyField1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageInfo = ImageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadBodyField1 {
    return {
      imageInfo: isSet(object.imageInfo) ? ImageInfo.fromJSON(object.imageInfo) : undefined,
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : undefined,
    };
  },

  toJSON(message: UploadBodyField1): unknown {
    const obj: any = {};
    if (message.imageInfo !== undefined) {
      obj.imageInfo = ImageInfo.toJSON(message.imageInfo);
    }
    if (message.field2 !== undefined) {
      obj.field2 = Math.round(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadBodyField1>, I>>(base?: I): UploadBodyField1 {
    return UploadBodyField1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadBodyField1>, I>>(object: I): UploadBodyField1 {
    const message = createBaseUploadBodyField1();
    message.imageInfo = (object.imageInfo !== undefined && object.imageInfo !== null)
      ? ImageInfo.fromPartial(object.imageInfo)
      : undefined;
    message.field2 = object.field2 ?? undefined;
    return message;
  },
};

function createBasePeerInfo(): PeerInfo {
  return { groupCode: 0 };
}

export const PeerInfo: MessageFns<PeerInfo> = {
  encode(message: PeerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupCode !== 0) {
      writer.uint32(8).uint32(message.groupCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PeerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.groupCode = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PeerInfo {
    return { groupCode: isSet(object.groupCode) ? globalThis.Number(object.groupCode) : 0 };
  },

  toJSON(message: PeerInfo): unknown {
    const obj: any = {};
    if (message.groupCode !== 0) {
      obj.groupCode = Math.round(message.groupCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PeerInfo>, I>>(base?: I): PeerInfo {
    return PeerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PeerInfo>, I>>(object: I): PeerInfo {
    const message = createBasePeerInfo();
    message.groupCode = object.groupCode ?? 0;
    return message;
  },
};

function createBaseImageInfo(): ImageInfo {
  return {
    picSize: 0,
    picMd5: "",
    sha1: "",
    fileName: "",
    field5: undefined,
    picWidth: 0,
    picHeight: 0,
    field8: undefined,
    field9: undefined,
  };
}

export const ImageInfo: MessageFns<ImageInfo> = {
  encode(message: ImageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.picSize !== 0) {
      writer.uint32(8).uint32(message.picSize);
    }
    if (message.picMd5 !== "") {
      writer.uint32(18).string(message.picMd5);
    }
    if (message.sha1 !== "") {
      writer.uint32(26).string(message.sha1);
    }
    if (message.fileName !== "") {
      writer.uint32(34).string(message.fileName);
    }
    if (message.field5 !== undefined) {
      ImageInfoField5.encode(message.field5, writer.uint32(42).fork()).join();
    }
    if (message.picWidth !== 0) {
      writer.uint32(48).uint32(message.picWidth);
    }
    if (message.picHeight !== 0) {
      writer.uint32(56).uint32(message.picHeight);
    }
    if (message.field8 !== undefined) {
      writer.uint32(64).uint32(message.field8);
    }
    if (message.field9 !== undefined) {
      writer.uint32(72).uint32(message.field9);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.picSize = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.picMd5 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sha1 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.field5 = ImageInfoField5.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.picWidth = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.picHeight = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.field8 = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.field9 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageInfo {
    return {
      picSize: isSet(object.picSize) ? globalThis.Number(object.picSize) : 0,
      picMd5: isSet(object.picMd5) ? globalThis.String(object.picMd5) : "",
      sha1: isSet(object.sha1) ? globalThis.String(object.sha1) : "",
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      field5: isSet(object.field5) ? ImageInfoField5.fromJSON(object.field5) : undefined,
      picWidth: isSet(object.picWidth) ? globalThis.Number(object.picWidth) : 0,
      picHeight: isSet(object.picHeight) ? globalThis.Number(object.picHeight) : 0,
      field8: isSet(object.field8) ? globalThis.Number(object.field8) : undefined,
      field9: isSet(object.field9) ? globalThis.Number(object.field9) : undefined,
    };
  },

  toJSON(message: ImageInfo): unknown {
    const obj: any = {};
    if (message.picSize !== 0) {
      obj.picSize = Math.round(message.picSize);
    }
    if (message.picMd5 !== "") {
      obj.picMd5 = message.picMd5;
    }
    if (message.sha1 !== "") {
      obj.sha1 = message.sha1;
    }
    if (message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.field5 !== undefined) {
      obj.field5 = ImageInfoField5.toJSON(message.field5);
    }
    if (message.picWidth !== 0) {
      obj.picWidth = Math.round(message.picWidth);
    }
    if (message.picHeight !== 0) {
      obj.picHeight = Math.round(message.picHeight);
    }
    if (message.field8 !== undefined) {
      obj.field8 = Math.round(message.field8);
    }
    if (message.field9 !== undefined) {
      obj.field9 = Math.round(message.field9);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageInfo>, I>>(base?: I): ImageInfo {
    return ImageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageInfo>, I>>(object: I): ImageInfo {
    const message = createBaseImageInfo();
    message.picSize = object.picSize ?? 0;
    message.picMd5 = object.picMd5 ?? "";
    message.sha1 = object.sha1 ?? "";
    message.fileName = object.fileName ?? "";
    message.field5 = (object.field5 !== undefined && object.field5 !== null)
      ? ImageInfoField5.fromPartial(object.field5)
      : undefined;
    message.picWidth = object.picWidth ?? 0;
    message.picHeight = object.picHeight ?? 0;
    message.field8 = object.field8 ?? undefined;
    message.field9 = object.field9 ?? undefined;
    return message;
  },
};

function createBaseImageInfoField5(): ImageInfoField5 {
  return { field1: undefined, field2: undefined, field3: undefined, field4: undefined };
}

export const ImageInfoField5: MessageFns<ImageInfoField5> = {
  encode(message: ImageInfoField5, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(16).uint32(message.field2);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).uint32(message.field4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageInfoField5 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageInfoField5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageInfoField5 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
    };
  },

  toJSON(message: ImageInfoField5): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = Math.round(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageInfoField5>, I>>(base?: I): ImageInfoField5 {
    return ImageInfoField5.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageInfoField5>, I>>(object: I): ImageInfoField5 {
    const message = createBaseImageInfoField5();
    message.field1 = object.field1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    return message;
  },
};

function createBaseRspUploadGroupPicPrepare(): RspUploadGroupPicPrepare {
  return { head: undefined, body: undefined };
}

export const RspUploadGroupPicPrepare: MessageFns<RspUploadGroupPicPrepare> = {
  encode(message: RspUploadGroupPicPrepare, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.head !== undefined) {
      RspHead.encode(message.head, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      RspBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspUploadGroupPicPrepare {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspUploadGroupPicPrepare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.head = RspHead.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = RspBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspUploadGroupPicPrepare {
    return {
      head: isSet(object.head) ? RspHead.fromJSON(object.head) : undefined,
      body: isSet(object.body) ? RspBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: RspUploadGroupPicPrepare): unknown {
    const obj: any = {};
    if (message.head !== undefined) {
      obj.head = RspHead.toJSON(message.head);
    }
    if (message.body !== undefined) {
      obj.body = RspBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspUploadGroupPicPrepare>, I>>(base?: I): RspUploadGroupPicPrepare {
    return RspUploadGroupPicPrepare.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspUploadGroupPicPrepare>, I>>(object: I): RspUploadGroupPicPrepare {
    const message = createBaseRspUploadGroupPicPrepare();
    message.head = (object.head !== undefined && object.head !== null) ? RspHead.fromPartial(object.head) : undefined;
    message.body = (object.body !== undefined && object.body !== null) ? RspBody.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseRspHead(): RspHead {
  return { field1: undefined, message: "" };
}

export const RspHead: MessageFns<RspHead> = {
  encode(message: RspHead, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      UploadHeadField1.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspHead {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspHead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = UploadHeadField1.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspHead {
    return {
      field1: isSet(object.field1) ? UploadHeadField1.fromJSON(object.field1) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: RspHead): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = UploadHeadField1.toJSON(message.field1);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspHead>, I>>(base?: I): RspHead {
    return RspHead.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspHead>, I>>(object: I): RspHead {
    const message = createBaseRspHead();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? UploadHeadField1.fromPartial(object.field1)
      : undefined;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseRspBody(): RspBody {
  return {
    field1: "",
    field2: 0,
    ipInfo: [],
    ipv6Info: [],
    field6: undefined,
    field7: undefined,
    domain: "",
    uploadIpList: [],
    field15: [],
  };
}

export const RspBody: MessageFns<RspBody> = {
  encode(message: RspBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== "") {
      writer.uint32(10).string(message.field1);
    }
    if (message.field2 !== 0) {
      writer.uint32(16).uint32(message.field2);
    }
    for (const v of message.ipInfo) {
      IPInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.ipv6Info) {
      IPv6Info.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.field6 !== undefined) {
      RspBodyField6.encode(message.field6, writer.uint32(50).fork()).join();
    }
    if (message.field7 !== undefined) {
      RspBodyField7.encode(message.field7, writer.uint32(58).fork()).join();
    }
    if (message.domain !== "") {
      writer.uint32(90).string(message.domain);
    }
    for (const v of message.uploadIpList) {
      IPAddress.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.field15) {
      IPv6Address.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.field2 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipInfo.push(IPInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ipv6Info.push(IPv6Info.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = RspBodyField6.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.field7 = RspBodyField7.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.uploadIpList.push(IPAddress.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.field15.push(IPv6Address.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBody {
    return {
      field1: isSet(object.field1) ? globalThis.String(object.field1) : "",
      field2: isSet(object.field2) ? globalThis.Number(object.field2) : 0,
      ipInfo: globalThis.Array.isArray(object?.ipInfo) ? object.ipInfo.map((e: any) => IPInfo.fromJSON(e)) : [],
      ipv6Info: globalThis.Array.isArray(object?.ipv6Info) ? object.ipv6Info.map((e: any) => IPv6Info.fromJSON(e)) : [],
      field6: isSet(object.field6) ? RspBodyField6.fromJSON(object.field6) : undefined,
      field7: isSet(object.field7) ? RspBodyField7.fromJSON(object.field7) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      uploadIpList: globalThis.Array.isArray(object?.uploadIpList)
        ? object.uploadIpList.map((e: any) => IPAddress.fromJSON(e))
        : [],
      field15: globalThis.Array.isArray(object?.field15) ? object.field15.map((e: any) => IPv6Address.fromJSON(e)) : [],
    };
  },

  toJSON(message: RspBody): unknown {
    const obj: any = {};
    if (message.field1 !== "") {
      obj.field1 = message.field1;
    }
    if (message.field2 !== 0) {
      obj.field2 = Math.round(message.field2);
    }
    if (message.ipInfo?.length) {
      obj.ipInfo = message.ipInfo.map((e) => IPInfo.toJSON(e));
    }
    if (message.ipv6Info?.length) {
      obj.ipv6Info = message.ipv6Info.map((e) => IPv6Info.toJSON(e));
    }
    if (message.field6 !== undefined) {
      obj.field6 = RspBodyField6.toJSON(message.field6);
    }
    if (message.field7 !== undefined) {
      obj.field7 = RspBodyField7.toJSON(message.field7);
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.uploadIpList?.length) {
      obj.uploadIpList = message.uploadIpList.map((e) => IPAddress.toJSON(e));
    }
    if (message.field15?.length) {
      obj.field15 = message.field15.map((e) => IPv6Address.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBody>, I>>(base?: I): RspBody {
    return RspBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBody>, I>>(object: I): RspBody {
    const message = createBaseRspBody();
    message.field1 = object.field1 ?? "";
    message.field2 = object.field2 ?? 0;
    message.ipInfo = object.ipInfo?.map((e) => IPInfo.fromPartial(e)) || [];
    message.ipv6Info = object.ipv6Info?.map((e) => IPv6Info.fromPartial(e)) || [];
    message.field6 = (object.field6 !== undefined && object.field6 !== null)
      ? RspBodyField6.fromPartial(object.field6)
      : undefined;
    message.field7 = (object.field7 !== undefined && object.field7 !== null)
      ? RspBodyField7.fromPartial(object.field7)
      : undefined;
    message.domain = object.domain ?? "";
    message.uploadIpList = object.uploadIpList?.map((e) => IPAddress.fromPartial(e)) || [];
    message.field15 = object.field15?.map((e) => IPv6Address.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRspBodyField6(): RspBodyField6 {
  return { field1: undefined, field2: undefined };
}

export const RspBodyField6: MessageFns<RspBodyField6> = {
  encode(message: RspBodyField6, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      RspBodyField61.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      RspBodyField62.encode(message.field2, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField6 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = RspBodyField61.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = RspBodyField62.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField6 {
    return {
      field1: isSet(object.field1) ? RspBodyField61.fromJSON(object.field1) : undefined,
      field2: isSet(object.field2) ? RspBodyField62.fromJSON(object.field2) : undefined,
    };
  },

  toJSON(message: RspBodyField6): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = RspBodyField61.toJSON(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = RspBodyField62.toJSON(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField6>, I>>(base?: I): RspBodyField6 {
    return RspBodyField6.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField6>, I>>(object: I): RspBodyField6 {
    const message = createBaseRspBodyField6();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? RspBodyField61.fromPartial(object.field1)
      : undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? RspBodyField62.fromPartial(object.field2)
      : undefined;
    return message;
  },
};

function createBaseRspBodyField61(): RspBodyField61 {
  return { field1: undefined, downloadInfo: undefined, field5: undefined, field6: undefined };
}

export const RspBodyField61: MessageFns<RspBodyField61> = {
  encode(message: RspBodyField61, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      RspBodyField611.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.downloadInfo !== undefined) {
      DownloadInfo.encode(message.downloadInfo, writer.uint32(18).fork()).join();
    }
    if (message.field5 !== undefined) {
      writer.uint32(40).uint32(message.field5);
    }
    if (message.field6 !== undefined) {
      RspBodyField616.encode(message.field6, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField61 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField61();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = RspBodyField611.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.downloadInfo = DownloadInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = RspBodyField616.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField61 {
    return {
      field1: isSet(object.field1) ? RspBodyField611.fromJSON(object.field1) : undefined,
      downloadInfo: isSet(object.downloadInfo) ? DownloadInfo.fromJSON(object.downloadInfo) : undefined,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : undefined,
      field6: isSet(object.field6) ? RspBodyField616.fromJSON(object.field6) : undefined,
    };
  },

  toJSON(message: RspBodyField61): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = RspBodyField611.toJSON(message.field1);
    }
    if (message.downloadInfo !== undefined) {
      obj.downloadInfo = DownloadInfo.toJSON(message.downloadInfo);
    }
    if (message.field5 !== undefined) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field6 !== undefined) {
      obj.field6 = RspBodyField616.toJSON(message.field6);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField61>, I>>(base?: I): RspBodyField61 {
    return RspBodyField61.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField61>, I>>(object: I): RspBodyField61 {
    const message = createBaseRspBodyField61();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? RspBodyField611.fromPartial(object.field1)
      : undefined;
    message.downloadInfo = (object.downloadInfo !== undefined && object.downloadInfo !== null)
      ? DownloadInfo.fromPartial(object.downloadInfo)
      : undefined;
    message.field5 = object.field5 ?? undefined;
    message.field6 = (object.field6 !== undefined && object.field6 !== null)
      ? RspBodyField616.fromPartial(object.field6)
      : undefined;
    return message;
  },
};

function createBaseRspBodyField611(): RspBodyField611 {
  return {
    imageInfo: undefined,
    fileId: undefined,
    field3: undefined,
    timestamp: undefined,
    field5: undefined,
    field6: undefined,
    field7: undefined,
  };
}

export const RspBodyField611: MessageFns<RspBodyField611> = {
  encode(message: RspBodyField611, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageInfo !== undefined) {
      ImageInfo.encode(message.imageInfo, writer.uint32(10).fork()).join();
    }
    if (message.fileId !== undefined) {
      writer.uint32(18).string(message.fileId);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(32).uint32(message.timestamp);
    }
    if (message.field5 !== undefined) {
      writer.uint32(40).uint32(message.field5);
    }
    if (message.field6 !== undefined) {
      writer.uint32(48).uint32(message.field6);
    }
    if (message.field7 !== undefined) {
      writer.uint32(56).uint32(message.field7);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField611 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField611();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageInfo = ImageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.field6 = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.field7 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField611 {
    return {
      imageInfo: isSet(object.imageInfo) ? ImageInfo.fromJSON(object.imageInfo) : undefined,
      fileId: isSet(object.fileId) ? globalThis.String(object.fileId) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : undefined,
      field6: isSet(object.field6) ? globalThis.Number(object.field6) : undefined,
      field7: isSet(object.field7) ? globalThis.Number(object.field7) : undefined,
    };
  },

  toJSON(message: RspBodyField611): unknown {
    const obj: any = {};
    if (message.imageInfo !== undefined) {
      obj.imageInfo = ImageInfo.toJSON(message.imageInfo);
    }
    if (message.fileId !== undefined) {
      obj.fileId = message.fileId;
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.field5 !== undefined) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field6 !== undefined) {
      obj.field6 = Math.round(message.field6);
    }
    if (message.field7 !== undefined) {
      obj.field7 = Math.round(message.field7);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField611>, I>>(base?: I): RspBodyField611 {
    return RspBodyField611.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField611>, I>>(object: I): RspBodyField611 {
    const message = createBaseRspBodyField611();
    message.imageInfo = (object.imageInfo !== undefined && object.imageInfo !== null)
      ? ImageInfo.fromPartial(object.imageInfo)
      : undefined;
    message.fileId = object.fileId ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.field5 = object.field5 ?? undefined;
    message.field6 = object.field6 ?? undefined;
    message.field7 = object.field7 ?? undefined;
    return message;
  },
};

function createBaseDownloadInfo(): DownloadInfo {
  return { path: "", option: undefined, domain: "" };
}

export const DownloadInfo: MessageFns<DownloadInfo> = {
  encode(message: DownloadInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.option !== undefined) {
      SpecOption.encode(message.option, writer.uint32(18).fork()).join();
    }
    if (message.domain !== "") {
      writer.uint32(26).string(message.domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.option = SpecOption.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownloadInfo {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      option: isSet(object.option) ? SpecOption.fromJSON(object.option) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
    };
  },

  toJSON(message: DownloadInfo): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.option !== undefined) {
      obj.option = SpecOption.toJSON(message.option);
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownloadInfo>, I>>(base?: I): DownloadInfo {
    return DownloadInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownloadInfo>, I>>(object: I): DownloadInfo {
    const message = createBaseDownloadInfo();
    message.path = object.path ?? "";
    message.option = (object.option !== undefined && object.option !== null)
      ? SpecOption.fromPartial(object.option)
      : undefined;
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseSpecOption(): SpecOption {
  return { spec1: "", spec2: "", spec3: "" };
}

export const SpecOption: MessageFns<SpecOption> = {
  encode(message: SpecOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spec1 !== "") {
      writer.uint32(10).string(message.spec1);
    }
    if (message.spec2 !== "") {
      writer.uint32(18).string(message.spec2);
    }
    if (message.spec3 !== "") {
      writer.uint32(26).string(message.spec3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpecOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpecOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spec1 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.spec2 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.spec3 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpecOption {
    return {
      spec1: isSet(object.spec1) ? globalThis.String(object.spec1) : "",
      spec2: isSet(object.spec2) ? globalThis.String(object.spec2) : "",
      spec3: isSet(object.spec3) ? globalThis.String(object.spec3) : "",
    };
  },

  toJSON(message: SpecOption): unknown {
    const obj: any = {};
    if (message.spec1 !== "") {
      obj.spec1 = message.spec1;
    }
    if (message.spec2 !== "") {
      obj.spec2 = message.spec2;
    }
    if (message.spec3 !== "") {
      obj.spec3 = message.spec3;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpecOption>, I>>(base?: I): SpecOption {
    return SpecOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpecOption>, I>>(object: I): SpecOption {
    const message = createBaseSpecOption();
    message.spec1 = object.spec1 ?? "";
    message.spec2 = object.spec2 ?? "";
    message.spec3 = object.spec3 ?? "";
    return message;
  },
};

function createBaseRspBodyField616(): RspBodyField616 {
  return { field2: new Uint8Array(0) };
}

export const RspBodyField616: MessageFns<RspBodyField616> = {
  encode(message: RspBodyField616, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field2.length !== 0) {
      writer.uint32(18).bytes(message.field2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField616 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField616();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField616 {
    return { field2: isSet(object.field2) ? bytesFromBase64(object.field2) : new Uint8Array(0) };
  },

  toJSON(message: RspBodyField616): unknown {
    const obj: any = {};
    if (message.field2.length !== 0) {
      obj.field2 = base64FromBytes(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField616>, I>>(base?: I): RspBodyField616 {
    return RspBodyField616.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField616>, I>>(object: I): RspBodyField616 {
    const message = createBaseRspBodyField616();
    message.field2 = object.field2 ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRspBodyField62(): RspBodyField62 {
  return { field1: undefined, field2: undefined, field3: undefined, field10: undefined };
}

export const RspBodyField62: MessageFns<RspBodyField62> = {
  encode(message: RspBodyField62, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      RspBodyField621.encode(message.field1, writer.uint32(10).fork()).join();
    }
    if (message.field2 !== undefined) {
      RspBodyField622.encode(message.field2, writer.uint32(18).fork()).join();
    }
    if (message.field3 !== undefined) {
      RspBodyField623.encode(message.field3, writer.uint32(26).fork()).join();
    }
    if (message.field10 !== undefined) {
      writer.uint32(80).uint32(message.field10);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField62 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField62();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field1 = RspBodyField621.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = RspBodyField622.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = RspBodyField623.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField62 {
    return {
      field1: isSet(object.field1) ? RspBodyField621.fromJSON(object.field1) : undefined,
      field2: isSet(object.field2) ? RspBodyField622.fromJSON(object.field2) : undefined,
      field3: isSet(object.field3) ? RspBodyField623.fromJSON(object.field3) : undefined,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : undefined,
    };
  },

  toJSON(message: RspBodyField62): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = RspBodyField621.toJSON(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = RspBodyField622.toJSON(message.field2);
    }
    if (message.field3 !== undefined) {
      obj.field3 = RspBodyField623.toJSON(message.field3);
    }
    if (message.field10 !== undefined) {
      obj.field10 = Math.round(message.field10);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField62>, I>>(base?: I): RspBodyField62 {
    return RspBodyField62.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField62>, I>>(object: I): RspBodyField62 {
    const message = createBaseRspBodyField62();
    message.field1 = (object.field1 !== undefined && object.field1 !== null)
      ? RspBodyField621.fromPartial(object.field1)
      : undefined;
    message.field2 = (object.field2 !== undefined && object.field2 !== null)
      ? RspBodyField622.fromPartial(object.field2)
      : undefined;
    message.field3 = (object.field3 !== undefined && object.field3 !== null)
      ? RspBodyField623.fromPartial(object.field3)
      : undefined;
    message.field10 = object.field10 ?? undefined;
    return message;
  },
};

function createBaseRspBodyField621(): RspBodyField621 {
  return {
    field1: undefined,
    field2: undefined,
    field12: undefined,
    field1001: undefined,
    field1002: undefined,
    field1003: undefined,
  };
}

export const RspBodyField621: MessageFns<RspBodyField621> = {
  encode(message: RspBodyField621, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field2 !== undefined) {
      writer.uint32(18).bytes(message.field2);
    }
    if (message.field12 !== undefined) {
      RspBodyField62112.encode(message.field12, writer.uint32(98).fork()).join();
    }
    if (message.field1001 !== undefined) {
      writer.uint32(8008).uint32(message.field1001);
    }
    if (message.field1002 !== undefined) {
      writer.uint32(8016).uint32(message.field1002);
    }
    if (message.field1003 !== undefined) {
      writer.uint32(8024).uint32(message.field1003);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField621 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField621();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = RspBodyField62112.decode(reader, reader.uint32());
          continue;
        }
        case 1001: {
          if (tag !== 8008) {
            break;
          }

          message.field1001 = reader.uint32();
          continue;
        }
        case 1002: {
          if (tag !== 8016) {
            break;
          }

          message.field1002 = reader.uint32();
          continue;
        }
        case 1003: {
          if (tag !== 8024) {
            break;
          }

          message.field1003 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField621 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field2: isSet(object.field2) ? bytesFromBase64(object.field2) : undefined,
      field12: isSet(object.field12) ? RspBodyField62112.fromJSON(object.field12) : undefined,
      field1001: isSet(object.field1001) ? globalThis.Number(object.field1001) : undefined,
      field1002: isSet(object.field1002) ? globalThis.Number(object.field1002) : undefined,
      field1003: isSet(object.field1003) ? globalThis.Number(object.field1003) : undefined,
    };
  },

  toJSON(message: RspBodyField621): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== undefined) {
      obj.field2 = base64FromBytes(message.field2);
    }
    if (message.field12 !== undefined) {
      obj.field12 = RspBodyField62112.toJSON(message.field12);
    }
    if (message.field1001 !== undefined) {
      obj.field1001 = Math.round(message.field1001);
    }
    if (message.field1002 !== undefined) {
      obj.field1002 = Math.round(message.field1002);
    }
    if (message.field1003 !== undefined) {
      obj.field1003 = Math.round(message.field1003);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField621>, I>>(base?: I): RspBodyField621 {
    return RspBodyField621.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField621>, I>>(object: I): RspBodyField621 {
    const message = createBaseRspBodyField621();
    message.field1 = object.field1 ?? undefined;
    message.field2 = object.field2 ?? undefined;
    message.field12 = (object.field12 !== undefined && object.field12 !== null)
      ? RspBodyField62112.fromPartial(object.field12)
      : undefined;
    message.field1001 = object.field1001 ?? undefined;
    message.field1002 = object.field1002 ?? undefined;
    message.field1003 = object.field1003 ?? undefined;
    return message;
  },
};

function createBaseRspBodyField622(): RspBodyField622 {
  return { field3: undefined };
}

export const RspBodyField622: MessageFns<RspBodyField622> = {
  encode(message: RspBodyField622, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field3 !== undefined) {
      writer.uint32(26).bytes(message.field3);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField622 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField622();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField622 {
    return { field3: isSet(object.field3) ? bytesFromBase64(object.field3) : undefined };
  },

  toJSON(message: RspBodyField622): unknown {
    const obj: any = {};
    if (message.field3 !== undefined) {
      obj.field3 = base64FromBytes(message.field3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField622>, I>>(base?: I): RspBodyField622 {
    return RspBodyField622.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField622>, I>>(object: I): RspBodyField622 {
    const message = createBaseRspBodyField622();
    message.field3 = object.field3 ?? undefined;
    return message;
  },
};

function createBaseRspBodyField623(): RspBodyField623 {
  return { field11: undefined, field12: undefined };
}

export const RspBodyField623: MessageFns<RspBodyField623> = {
  encode(message: RspBodyField623, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field11 !== undefined) {
      writer.uint32(90).bytes(message.field11);
    }
    if (message.field12 !== undefined) {
      writer.uint32(98).bytes(message.field12);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField623 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField623();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.field11 = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField623 {
    return {
      field11: isSet(object.field11) ? bytesFromBase64(object.field11) : undefined,
      field12: isSet(object.field12) ? bytesFromBase64(object.field12) : undefined,
    };
  },

  toJSON(message: RspBodyField623): unknown {
    const obj: any = {};
    if (message.field11 !== undefined) {
      obj.field11 = base64FromBytes(message.field11);
    }
    if (message.field12 !== undefined) {
      obj.field12 = base64FromBytes(message.field12);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField623>, I>>(base?: I): RspBodyField623 {
    return RspBodyField623.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField623>, I>>(object: I): RspBodyField623 {
    const message = createBaseRspBodyField623();
    message.field11 = object.field11 ?? undefined;
    message.field12 = object.field12 ?? undefined;
    return message;
  },
};

function createBaseRspBodyField62112(): RspBodyField62112 {
  return {
    field1: undefined,
    field3: undefined,
    field4: undefined,
    field9: undefined,
    field10: undefined,
    field12: undefined,
    field18: undefined,
    field19: undefined,
    field21: undefined,
    rkey: "",
    field31: undefined,
  };
}

export const RspBodyField62112: MessageFns<RspBodyField62112> = {
  encode(message: RspBodyField62112, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== undefined) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field3 !== undefined) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      writer.uint32(32).uint32(message.field4);
    }
    if (message.field9 !== undefined) {
      writer.uint32(74).bytes(message.field9);
    }
    if (message.field10 !== undefined) {
      writer.uint32(80).uint32(message.field10);
    }
    if (message.field12 !== undefined) {
      writer.uint32(98).bytes(message.field12);
    }
    if (message.field18 !== undefined) {
      writer.uint32(146).bytes(message.field18);
    }
    if (message.field19 !== undefined) {
      writer.uint32(154).bytes(message.field19);
    }
    if (message.field21 !== undefined) {
      RspBodyField6211221.encode(message.field21, writer.uint32(170).fork()).join();
    }
    if (message.rkey !== "") {
      writer.uint32(242).string(message.rkey);
    }
    if (message.field31 !== undefined) {
      writer.uint32(250).string(message.field31);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField62112 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField62112();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.field9 = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.field12 = reader.bytes();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.field18 = reader.bytes();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.field19 = reader.bytes();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.field21 = RspBodyField6211221.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.rkey = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.field31 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField62112 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : undefined,
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : undefined,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : undefined,
      field9: isSet(object.field9) ? bytesFromBase64(object.field9) : undefined,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : undefined,
      field12: isSet(object.field12) ? bytesFromBase64(object.field12) : undefined,
      field18: isSet(object.field18) ? bytesFromBase64(object.field18) : undefined,
      field19: isSet(object.field19) ? bytesFromBase64(object.field19) : undefined,
      field21: isSet(object.field21) ? RspBodyField6211221.fromJSON(object.field21) : undefined,
      rkey: isSet(object.rkey) ? globalThis.String(object.rkey) : "",
      field31: isSet(object.field31) ? globalThis.String(object.field31) : undefined,
    };
  },

  toJSON(message: RspBodyField62112): unknown {
    const obj: any = {};
    if (message.field1 !== undefined) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field3 !== undefined) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field9 !== undefined) {
      obj.field9 = base64FromBytes(message.field9);
    }
    if (message.field10 !== undefined) {
      obj.field10 = Math.round(message.field10);
    }
    if (message.field12 !== undefined) {
      obj.field12 = base64FromBytes(message.field12);
    }
    if (message.field18 !== undefined) {
      obj.field18 = base64FromBytes(message.field18);
    }
    if (message.field19 !== undefined) {
      obj.field19 = base64FromBytes(message.field19);
    }
    if (message.field21 !== undefined) {
      obj.field21 = RspBodyField6211221.toJSON(message.field21);
    }
    if (message.rkey !== "") {
      obj.rkey = message.rkey;
    }
    if (message.field31 !== undefined) {
      obj.field31 = message.field31;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField62112>, I>>(base?: I): RspBodyField62112 {
    return RspBodyField62112.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField62112>, I>>(object: I): RspBodyField62112 {
    const message = createBaseRspBodyField62112();
    message.field1 = object.field1 ?? undefined;
    message.field3 = object.field3 ?? undefined;
    message.field4 = object.field4 ?? undefined;
    message.field9 = object.field9 ?? undefined;
    message.field10 = object.field10 ?? undefined;
    message.field12 = object.field12 ?? undefined;
    message.field18 = object.field18 ?? undefined;
    message.field19 = object.field19 ?? undefined;
    message.field21 = (object.field21 !== undefined && object.field21 !== null)
      ? RspBodyField6211221.fromPartial(object.field21)
      : undefined;
    message.rkey = object.rkey ?? "";
    message.field31 = object.field31 ?? undefined;
    return message;
  },
};

function createBaseRspBodyField6211221(): RspBodyField6211221 {
  return { field1: 0, field2: "", field3: 0, field4: 0, field5: 0, field7: "" };
}

export const RspBodyField6211221: MessageFns<RspBodyField6211221> = {
  encode(message: RspBodyField6211221, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== 0) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field2 !== "") {
      writer.uint32(18).string(message.field2);
    }
    if (message.field3 !== 0) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== 0) {
      writer.uint32(32).uint32(message.field4);
    }
    if (message.field5 !== 0) {
      writer.uint32(40).uint32(message.field5);
    }
    if (message.field7 !== "") {
      writer.uint32(58).string(message.field7);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField6211221 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField6211221();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.field7 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField6211221 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : 0,
      field2: isSet(object.field2) ? globalThis.String(object.field2) : "",
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : 0,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : 0,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : 0,
      field7: isSet(object.field7) ? globalThis.String(object.field7) : "",
    };
  },

  toJSON(message: RspBodyField6211221): unknown {
    const obj: any = {};
    if (message.field1 !== 0) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field2 !== "") {
      obj.field2 = message.field2;
    }
    if (message.field3 !== 0) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== 0) {
      obj.field4 = Math.round(message.field4);
    }
    if (message.field5 !== 0) {
      obj.field5 = Math.round(message.field5);
    }
    if (message.field7 !== "") {
      obj.field7 = message.field7;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField6211221>, I>>(base?: I): RspBodyField6211221 {
    return RspBodyField6211221.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField6211221>, I>>(object: I): RspBodyField6211221 {
    const message = createBaseRspBodyField6211221();
    message.field1 = object.field1 ?? 0;
    message.field2 = object.field2 ?? "";
    message.field3 = object.field3 ?? 0;
    message.field4 = object.field4 ?? 0;
    message.field5 = object.field5 ?? 0;
    message.field7 = object.field7 ?? "";
    return message;
  },
};

function createBaseRspBodyField7(): RspBodyField7 {
  return { field1: 0, field3: undefined };
}

export const RspBodyField7: MessageFns<RspBodyField7> = {
  encode(message: RspBodyField7, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== 0) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field3 !== undefined) {
      RspBodyField73.encode(message.field3, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField7 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = RspBodyField73.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField7 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : 0,
      field3: isSet(object.field3) ? RspBodyField73.fromJSON(object.field3) : undefined,
    };
  },

  toJSON(message: RspBodyField7): unknown {
    const obj: any = {};
    if (message.field1 !== 0) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field3 !== undefined) {
      obj.field3 = RspBodyField73.toJSON(message.field3);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField7>, I>>(base?: I): RspBodyField7 {
    return RspBodyField7.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField7>, I>>(object: I): RspBodyField7 {
    const message = createBaseRspBodyField7();
    message.field1 = object.field1 ?? 0;
    message.field3 = (object.field3 !== undefined && object.field3 !== null)
      ? RspBodyField73.fromPartial(object.field3)
      : undefined;
    return message;
  },
};

function createBaseRspBodyField73(): RspBodyField73 {
  return { field1: 0, field4: 0 };
}

export const RspBodyField73: MessageFns<RspBodyField73> = {
  encode(message: RspBodyField73, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field1 !== 0) {
      writer.uint32(8).uint32(message.field1);
    }
    if (message.field4 !== 0) {
      writer.uint32(32).uint32(message.field4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBodyField73 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBodyField73();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field1 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBodyField73 {
    return {
      field1: isSet(object.field1) ? globalThis.Number(object.field1) : 0,
      field4: isSet(object.field4) ? globalThis.Number(object.field4) : 0,
    };
  },

  toJSON(message: RspBodyField73): unknown {
    const obj: any = {};
    if (message.field1 !== 0) {
      obj.field1 = Math.round(message.field1);
    }
    if (message.field4 !== 0) {
      obj.field4 = Math.round(message.field4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBodyField73>, I>>(base?: I): RspBodyField73 {
    return RspBodyField73.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBodyField73>, I>>(object: I): RspBodyField73 {
    const message = createBaseRspBodyField73();
    message.field1 = object.field1 ?? 0;
    message.field4 = object.field4 ?? 0;
    return message;
  },
};

function createBaseIPInfo(): IPInfo {
  return { ip1: 0, port1: 0, ip2: 0, port2: 0, field5: 0 };
}

export const IPInfo: MessageFns<IPInfo> = {
  encode(message: IPInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip1 !== 0) {
      writer.uint32(8).uint32(message.ip1);
    }
    if (message.port1 !== 0) {
      writer.uint32(16).uint32(message.port1);
    }
    if (message.ip2 !== 0) {
      writer.uint32(24).uint32(message.ip2);
    }
    if (message.port2 !== 0) {
      writer.uint32(32).uint32(message.port2);
    }
    if (message.field5 !== 0) {
      writer.uint32(4800).uint32(message.field5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ip1 = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port1 = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ip2 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.port2 = reader.uint32();
          continue;
        }
        case 600: {
          if (tag !== 4800) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPInfo {
    return {
      ip1: isSet(object.ip1) ? globalThis.Number(object.ip1) : 0,
      port1: isSet(object.port1) ? globalThis.Number(object.port1) : 0,
      ip2: isSet(object.ip2) ? globalThis.Number(object.ip2) : 0,
      port2: isSet(object.port2) ? globalThis.Number(object.port2) : 0,
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : 0,
    };
  },

  toJSON(message: IPInfo): unknown {
    const obj: any = {};
    if (message.ip1 !== 0) {
      obj.ip1 = Math.round(message.ip1);
    }
    if (message.port1 !== 0) {
      obj.port1 = Math.round(message.port1);
    }
    if (message.ip2 !== 0) {
      obj.ip2 = Math.round(message.ip2);
    }
    if (message.port2 !== 0) {
      obj.port2 = Math.round(message.port2);
    }
    if (message.field5 !== 0) {
      obj.field5 = Math.round(message.field5);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPInfo>, I>>(base?: I): IPInfo {
    return IPInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPInfo>, I>>(object: I): IPInfo {
    const message = createBaseIPInfo();
    message.ip1 = object.ip1 ?? 0;
    message.port1 = object.port1 ?? 0;
    message.ip2 = object.ip2 ?? 0;
    message.port2 = object.port2 ?? 0;
    message.field5 = object.field5 ?? 0;
    return message;
  },
};

function createBaseIPAddress(): IPAddress {
  return { ip: 0, port: 0 };
}

export const IPAddress: MessageFns<IPAddress> = {
  encode(message: IPAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip !== 0) {
      writer.uint32(8).uint32(message.ip);
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ip = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPAddress {
    return {
      ip: isSet(object.ip) ? globalThis.Number(object.ip) : 0,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: IPAddress): unknown {
    const obj: any = {};
    if (message.ip !== 0) {
      obj.ip = Math.round(message.ip);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPAddress>, I>>(base?: I): IPAddress {
    return IPAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPAddress>, I>>(object: I): IPAddress {
    const message = createBaseIPAddress();
    message.ip = object.ip ?? 0;
    message.port = object.port ?? 0;
    return message;
  },
};

function createBaseIPv6Address(): IPv6Address {
  return { ip: new Uint8Array(0), port: 0 };
}

export const IPv6Address: MessageFns<IPv6Address> = {
  encode(message: IPv6Address, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip.length !== 0) {
      writer.uint32(10).bytes(message.ip);
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPv6Address {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPv6Address();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPv6Address {
    return {
      ip: isSet(object.ip) ? bytesFromBase64(object.ip) : new Uint8Array(0),
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: IPv6Address): unknown {
    const obj: any = {};
    if (message.ip.length !== 0) {
      obj.ip = base64FromBytes(message.ip);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPv6Address>, I>>(base?: I): IPv6Address {
    return IPv6Address.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPv6Address>, I>>(object: I): IPv6Address {
    const message = createBaseIPv6Address();
    message.ip = object.ip ?? new Uint8Array(0);
    message.port = object.port ?? 0;
    return message;
  },
};

function createBaseIPv6Info(): IPv6Info {
  return { ip: new Uint8Array(0), port: 0, field3: "", field5: 0 };
}

export const IPv6Info: MessageFns<IPv6Info> = {
  encode(message: IPv6Info, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip.length !== 0) {
      writer.uint32(10).bytes(message.ip);
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    if (message.field3 !== "") {
      writer.uint32(26).string(message.field3);
    }
    if (message.field5 !== 0) {
      writer.uint32(40).uint32(message.field5);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPv6Info {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPv6Info();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.field3 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.field5 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPv6Info {
    return {
      ip: isSet(object.ip) ? bytesFromBase64(object.ip) : new Uint8Array(0),
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      field3: isSet(object.field3) ? globalThis.String(object.field3) : "",
      field5: isSet(object.field5) ? globalThis.Number(object.field5) : 0,
    };
  },

  toJSON(message: IPv6Info): unknown {
    const obj: any = {};
    if (message.ip.length !== 0) {
      obj.ip = base64FromBytes(message.ip);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.field3 !== "") {
      obj.field3 = message.field3;
    }
    if (message.field5 !== 0) {
      obj.field5 = Math.round(message.field5);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPv6Info>, I>>(base?: I): IPv6Info {
    return IPv6Info.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPv6Info>, I>>(object: I): IPv6Info {
    const message = createBaseIPv6Info();
    message.ip = object.ip ?? new Uint8Array(0);
    message.port = object.port ?? 0;
    message.field3 = object.field3 ?? "";
    message.field5 = object.field5 ?? 0;
    return message;
  },
};

function createBasePicHighwayUploadExtendInfo(): PicHighwayUploadExtendInfo {
  return {
    fileId: "",
    token2: "",
    field3: 0,
    field4: undefined,
    field5: undefined,
    field6: undefined,
    field10: 0,
    chunkInfo: undefined,
  };
}

export const PicHighwayUploadExtendInfo: MessageFns<PicHighwayUploadExtendInfo> = {
  encode(message: PicHighwayUploadExtendInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileId !== "") {
      writer.uint32(10).string(message.fileId);
    }
    if (message.token2 !== "") {
      writer.uint32(18).string(message.token2);
    }
    if (message.field3 !== 0) {
      writer.uint32(24).uint32(message.field3);
    }
    if (message.field4 !== undefined) {
      PicHighwayUploadExtendInfoField4.encode(message.field4, writer.uint32(34).fork()).join();
    }
    if (message.field5 !== undefined) {
      PicHighwayUploadExtendInfoField5.encode(message.field5, writer.uint32(42).fork()).join();
    }
    if (message.field6 !== undefined) {
      RspBodyField61.encode(message.field6, writer.uint32(50).fork()).join();
    }
    if (message.field10 !== 0) {
      writer.uint32(80).uint32(message.field10);
    }
    if (message.chunkInfo !== undefined) {
      ChunkInfo.encode(message.chunkInfo, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PicHighwayUploadExtendInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePicHighwayUploadExtendInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token2 = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.field3 = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.field4 = PicHighwayUploadExtendInfoField4.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.field5 = PicHighwayUploadExtendInfoField5.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.field6 = RspBodyField61.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.field10 = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.chunkInfo = ChunkInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PicHighwayUploadExtendInfo {
    return {
      fileId: isSet(object.fileId) ? globalThis.String(object.fileId) : "",
      token2: isSet(object.token2) ? globalThis.String(object.token2) : "",
      field3: isSet(object.field3) ? globalThis.Number(object.field3) : 0,
      field4: isSet(object.field4) ? PicHighwayUploadExtendInfoField4.fromJSON(object.field4) : undefined,
      field5: isSet(object.field5) ? PicHighwayUploadExtendInfoField5.fromJSON(object.field5) : undefined,
      field6: isSet(object.field6) ? RspBodyField61.fromJSON(object.field6) : undefined,
      field10: isSet(object.field10) ? globalThis.Number(object.field10) : 0,
      chunkInfo: isSet(object.chunkInfo) ? ChunkInfo.fromJSON(object.chunkInfo) : undefined,
    };
  },

  toJSON(message: PicHighwayUploadExtendInfo): unknown {
    const obj: any = {};
    if (message.fileId !== "") {
      obj.fileId = message.fileId;
    }
    if (message.token2 !== "") {
      obj.token2 = message.token2;
    }
    if (message.field3 !== 0) {
      obj.field3 = Math.round(message.field3);
    }
    if (message.field4 !== undefined) {
      obj.field4 = PicHighwayUploadExtendInfoField4.toJSON(message.field4);
    }
    if (message.field5 !== undefined) {
      obj.field5 = PicHighwayUploadExtendInfoField5.toJSON(message.field5);
    }
    if (message.field6 !== undefined) {
      obj.field6 = RspBodyField61.toJSON(message.field6);
    }
    if (message.field10 !== 0) {
      obj.field10 = Math.round(message.field10);
    }
    if (message.chunkInfo !== undefined) {
      obj.chunkInfo = ChunkInfo.toJSON(message.chunkInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PicHighwayUploadExtendInfo>, I>>(base?: I): PicHighwayUploadExtendInfo {
    return PicHighwayUploadExtendInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PicHighwayUploadExtendInfo>, I>>(object: I): PicHighwayUploadExtendInfo {
    const message = createBasePicHighwayUploadExtendInfo();
    message.fileId = object.fileId ?? "";
    message.token2 = object.token2 ?? "";
    message.field3 = object.field3 ?? 0;
    message.field4 = (object.field4 !== undefined && object.field4 !== null)
      ? PicHighwayUploadExtendInfoField4.fromPartial(object.field4)
      : undefined;
    message.field5 = (object.field5 !== undefined && object.field5 !== null)
      ? PicHighwayUploadExtendInfoField5.fromPartial(object.field5)
      : undefined;
    message.field6 = (object.field6 !== undefined && object.field6 !== null)
      ? RspBodyField61.fromPartial(object.field6)
      : undefined;
    message.field10 = object.field10 ?? 0;
    message.chunkInfo = (object.chunkInfo !== undefined && object.chunkInfo !== null)
      ? ChunkInfo.fromPartial(object.chunkInfo)
      : undefined;
    return message;
  },
};

function createBasePicHighwayUploadExtendInfoField4(): PicHighwayUploadExtendInfoField4 {
  return { field4: 0 };
}

export const PicHighwayUploadExtendInfoField4: MessageFns<PicHighwayUploadExtendInfoField4> = {
  encode(message: PicHighwayUploadExtendInfoField4, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field4 !== 0) {
      writer.uint32(32).uint32(message.field4);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PicHighwayUploadExtendInfoField4 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePicHighwayUploadExtendInfoField4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.field4 = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PicHighwayUploadExtendInfoField4 {
    return { field4: isSet(object.field4) ? globalThis.Number(object.field4) : 0 };
  },

  toJSON(message: PicHighwayUploadExtendInfoField4): unknown {
    const obj: any = {};
    if (message.field4 !== 0) {
      obj.field4 = Math.round(message.field4);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField4>, I>>(
    base?: I,
  ): PicHighwayUploadExtendInfoField4 {
    return PicHighwayUploadExtendInfoField4.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField4>, I>>(
    object: I,
  ): PicHighwayUploadExtendInfoField4 {
    const message = createBasePicHighwayUploadExtendInfoField4();
    message.field4 = object.field4 ?? 0;
    return message;
  },
};

function createBasePicHighwayUploadExtendInfoField5(): PicHighwayUploadExtendInfoField5 {
  return { ipList: [] };
}

export const PicHighwayUploadExtendInfoField5: MessageFns<PicHighwayUploadExtendInfoField5> = {
  encode(message: PicHighwayUploadExtendInfoField5, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ipList) {
      IPAddressInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PicHighwayUploadExtendInfoField5 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePicHighwayUploadExtendInfoField5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ipList.push(IPAddressInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PicHighwayUploadExtendInfoField5 {
    return {
      ipList: globalThis.Array.isArray(object?.ipList) ? object.ipList.map((e: any) => IPAddressInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: PicHighwayUploadExtendInfoField5): unknown {
    const obj: any = {};
    if (message.ipList?.length) {
      obj.ipList = message.ipList.map((e) => IPAddressInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField5>, I>>(
    base?: I,
  ): PicHighwayUploadExtendInfoField5 {
    return PicHighwayUploadExtendInfoField5.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField5>, I>>(
    object: I,
  ): PicHighwayUploadExtendInfoField5 {
    const message = createBasePicHighwayUploadExtendInfoField5();
    message.ipList = object.ipList?.map((e) => IPAddressInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBasePicHighwayUploadExtendInfoField66(): PicHighwayUploadExtendInfoField66 {
  return { field2: new Uint8Array(0) };
}

export const PicHighwayUploadExtendInfoField66: MessageFns<PicHighwayUploadExtendInfoField66> = {
  encode(message: PicHighwayUploadExtendInfoField66, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field2.length !== 0) {
      writer.uint32(18).bytes(message.field2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PicHighwayUploadExtendInfoField66 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePicHighwayUploadExtendInfoField66();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.field2 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PicHighwayUploadExtendInfoField66 {
    return { field2: isSet(object.field2) ? bytesFromBase64(object.field2) : new Uint8Array(0) };
  },

  toJSON(message: PicHighwayUploadExtendInfoField66): unknown {
    const obj: any = {};
    if (message.field2.length !== 0) {
      obj.field2 = base64FromBytes(message.field2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField66>, I>>(
    base?: I,
  ): PicHighwayUploadExtendInfoField66 {
    return PicHighwayUploadExtendInfoField66.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PicHighwayUploadExtendInfoField66>, I>>(
    object: I,
  ): PicHighwayUploadExtendInfoField66 {
    const message = createBasePicHighwayUploadExtendInfoField66();
    message.field2 = object.field2 ?? new Uint8Array(0);
    return message;
  },
};

function createBaseChunkInfo(): ChunkInfo {
  return { chunkSha1: [] };
}

export const ChunkInfo: MessageFns<ChunkInfo> = {
  encode(message: ChunkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.chunkSha1) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChunkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunkSha1.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChunkInfo {
    return {
      chunkSha1: globalThis.Array.isArray(object?.chunkSha1)
        ? object.chunkSha1.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: ChunkInfo): unknown {
    const obj: any = {};
    if (message.chunkSha1?.length) {
      obj.chunkSha1 = message.chunkSha1.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChunkInfo>, I>>(base?: I): ChunkInfo {
    return ChunkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChunkInfo>, I>>(object: I): ChunkInfo {
    const message = createBaseChunkInfo();
    message.chunkSha1 = object.chunkSha1?.map((e) => e) || [];
    return message;
  },
};

function createBaseIPAddressInfo(): IPAddressInfo {
  return { ip: undefined, port: 0 };
}

export const IPAddressInfo: MessageFns<IPAddressInfo> = {
  encode(message: IPAddressInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip !== undefined) {
      IPExtendInfo.encode(message.ip, writer.uint32(10).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPAddressInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPAddressInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip = IPExtendInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPAddressInfo {
    return {
      ip: isSet(object.ip) ? IPExtendInfo.fromJSON(object.ip) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: IPAddressInfo): unknown {
    const obj: any = {};
    if (message.ip !== undefined) {
      obj.ip = IPExtendInfo.toJSON(message.ip);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPAddressInfo>, I>>(base?: I): IPAddressInfo {
    return IPAddressInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPAddressInfo>, I>>(object: I): IPAddressInfo {
    const message = createBaseIPAddressInfo();
    message.ip = (object.ip !== undefined && object.ip !== null) ? IPExtendInfo.fromPartial(object.ip) : undefined;
    message.port = object.port ?? 0;
    return message;
  },
};

function createBaseIPExtendInfo(): IPExtendInfo {
  return { type: 0, ip: "" };
}

export const IPExtendInfo: MessageFns<IPExtendInfo> = {
  encode(message: IPExtendInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).uint32(message.type);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPExtendInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPExtendInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPExtendInfo {
    return {
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
    };
  },

  toJSON(message: IPExtendInfo): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPExtendInfo>, I>>(base?: I): IPExtendInfo {
    return IPExtendInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPExtendInfo>, I>>(object: I): IPExtendInfo {
    const message = createBaseIPExtendInfo();
    message.type = object.type ?? 0;
    message.ip = object.ip ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
