// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.32.1
// source: im_receipt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "im_receipt";

export interface MsgInfo {
  uint64FromUin?: number | undefined;
  uint64ToUin?: number | undefined;
  uint32MsgSeq?: number | undefined;
  uint32MsgRandom?: number | undefined;
}

export interface ReceiptInfo {
  uint64ReadTime?: number | undefined;
}

export interface ReceiptReq {
  command?: number | undefined;
  msgInfo?: MsgInfo | undefined;
}

export interface ReceiptResp {
  command?: number | undefined;
  receiptInfo?: ReceiptInfo | undefined;
}

function createBaseMsgInfo(): MsgInfo {
  return { uint64FromUin: 0, uint64ToUin: 0, uint32MsgSeq: 0, uint32MsgRandom: 0 };
}

export const MsgInfo: MessageFns<MsgInfo> = {
  encode(message: MsgInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint64FromUin !== undefined && message.uint64FromUin !== 0) {
      writer.uint32(8).uint64(message.uint64FromUin);
    }
    if (message.uint64ToUin !== undefined && message.uint64ToUin !== 0) {
      writer.uint32(16).uint64(message.uint64ToUin);
    }
    if (message.uint32MsgSeq !== undefined && message.uint32MsgSeq !== 0) {
      writer.uint32(24).uint32(message.uint32MsgSeq);
    }
    if (message.uint32MsgRandom !== undefined && message.uint32MsgRandom !== 0) {
      writer.uint32(32).uint32(message.uint32MsgRandom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint64FromUin = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint64ToUin = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32MsgSeq = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32MsgRandom = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgInfo {
    return {
      uint64FromUin: isSet(object.uint64FromUin) ? globalThis.Number(object.uint64FromUin) : 0,
      uint64ToUin: isSet(object.uint64ToUin) ? globalThis.Number(object.uint64ToUin) : 0,
      uint32MsgSeq: isSet(object.uint32MsgSeq) ? globalThis.Number(object.uint32MsgSeq) : 0,
      uint32MsgRandom: isSet(object.uint32MsgRandom) ? globalThis.Number(object.uint32MsgRandom) : 0,
    };
  },

  toJSON(message: MsgInfo): unknown {
    const obj: any = {};
    if (message.uint64FromUin !== undefined && message.uint64FromUin !== 0) {
      obj.uint64FromUin = Math.round(message.uint64FromUin);
    }
    if (message.uint64ToUin !== undefined && message.uint64ToUin !== 0) {
      obj.uint64ToUin = Math.round(message.uint64ToUin);
    }
    if (message.uint32MsgSeq !== undefined && message.uint32MsgSeq !== 0) {
      obj.uint32MsgSeq = Math.round(message.uint32MsgSeq);
    }
    if (message.uint32MsgRandom !== undefined && message.uint32MsgRandom !== 0) {
      obj.uint32MsgRandom = Math.round(message.uint32MsgRandom);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgInfo>, I>>(base?: I): MsgInfo {
    return MsgInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgInfo>, I>>(object: I): MsgInfo {
    const message = createBaseMsgInfo();
    message.uint64FromUin = object.uint64FromUin ?? 0;
    message.uint64ToUin = object.uint64ToUin ?? 0;
    message.uint32MsgSeq = object.uint32MsgSeq ?? 0;
    message.uint32MsgRandom = object.uint32MsgRandom ?? 0;
    return message;
  },
};

function createBaseReceiptInfo(): ReceiptInfo {
  return { uint64ReadTime: 0 };
}

export const ReceiptInfo: MessageFns<ReceiptInfo> = {
  encode(message: ReceiptInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint64ReadTime !== undefined && message.uint64ReadTime !== 0) {
      writer.uint32(8).uint64(message.uint64ReadTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiptInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiptInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint64ReadTime = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiptInfo {
    return { uint64ReadTime: isSet(object.uint64ReadTime) ? globalThis.Number(object.uint64ReadTime) : 0 };
  },

  toJSON(message: ReceiptInfo): unknown {
    const obj: any = {};
    if (message.uint64ReadTime !== undefined && message.uint64ReadTime !== 0) {
      obj.uint64ReadTime = Math.round(message.uint64ReadTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceiptInfo>, I>>(base?: I): ReceiptInfo {
    return ReceiptInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceiptInfo>, I>>(object: I): ReceiptInfo {
    const message = createBaseReceiptInfo();
    message.uint64ReadTime = object.uint64ReadTime ?? 0;
    return message;
  },
};

function createBaseReceiptReq(): ReceiptReq {
  return { command: 0, msgInfo: undefined };
}

export const ReceiptReq: MessageFns<ReceiptReq> = {
  encode(message: ReceiptReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.command !== undefined && message.command !== 0) {
      writer.uint32(8).int32(message.command);
    }
    if (message.msgInfo !== undefined) {
      MsgInfo.encode(message.msgInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiptReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiptReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.command = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msgInfo = MsgInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiptReq {
    return {
      command: isSet(object.command) ? globalThis.Number(object.command) : 0,
      msgInfo: isSet(object.msgInfo) ? MsgInfo.fromJSON(object.msgInfo) : undefined,
    };
  },

  toJSON(message: ReceiptReq): unknown {
    const obj: any = {};
    if (message.command !== undefined && message.command !== 0) {
      obj.command = Math.round(message.command);
    }
    if (message.msgInfo !== undefined) {
      obj.msgInfo = MsgInfo.toJSON(message.msgInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceiptReq>, I>>(base?: I): ReceiptReq {
    return ReceiptReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceiptReq>, I>>(object: I): ReceiptReq {
    const message = createBaseReceiptReq();
    message.command = object.command ?? 0;
    message.msgInfo = (object.msgInfo !== undefined && object.msgInfo !== null)
      ? MsgInfo.fromPartial(object.msgInfo)
      : undefined;
    return message;
  },
};

function createBaseReceiptResp(): ReceiptResp {
  return { command: 0, receiptInfo: undefined };
}

export const ReceiptResp: MessageFns<ReceiptResp> = {
  encode(message: ReceiptResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.command !== undefined && message.command !== 0) {
      writer.uint32(8).int32(message.command);
    }
    if (message.receiptInfo !== undefined) {
      ReceiptInfo.encode(message.receiptInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiptResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiptResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.command = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiptInfo = ReceiptInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiptResp {
    return {
      command: isSet(object.command) ? globalThis.Number(object.command) : 0,
      receiptInfo: isSet(object.receiptInfo) ? ReceiptInfo.fromJSON(object.receiptInfo) : undefined,
    };
  },

  toJSON(message: ReceiptResp): unknown {
    const obj: any = {};
    if (message.command !== undefined && message.command !== 0) {
      obj.command = Math.round(message.command);
    }
    if (message.receiptInfo !== undefined) {
      obj.receiptInfo = ReceiptInfo.toJSON(message.receiptInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceiptResp>, I>>(base?: I): ReceiptResp {
    return ReceiptResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceiptResp>, I>>(object: I): ReceiptResp {
    const message = createBaseReceiptResp();
    message.command = object.command ?? 0;
    message.receiptInfo = (object.receiptInfo !== undefined && object.receiptInfo !== null)
      ? ReceiptInfo.fromPartial(object.receiptInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
