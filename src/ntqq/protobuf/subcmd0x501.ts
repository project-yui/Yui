// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.32.1
// source: subcmd0x501.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "subcmd0x501";

export interface ReqBody {
  /** java里面是1，但实际抓包不是1 */
  msgSubcmd0x501ReqBody?: SubCmd0x501ReqBody | undefined;
}

export interface RspBody {
  msgSubcmd0x501RspBody?: SubCmd0x501Rspbody | undefined;
}

export interface SubCmd0x501ReqBody {
  uint64Uin?: number | undefined;
  uint32IdcId?: number | undefined;
  uint32Appid?: number | undefined;
  uint32LoginSigType?: number | undefined;
  bytesLoginSigTicket?: Uint8Array | undefined;
  uint32RequestFlag?: number | undefined;
  rptUint32ServiceTypes: number[];
  uint32Bid?: number | undefined;
  uint32Term?: number | undefined;
  uint32Plat?: number | undefined;
  uint32Net?: number | undefined;
  uint32Caller?: number | undefined;
  bytesVer?: string | undefined;
}

export interface SubCmd0x501RspbodyDownloadEncryptConf {
  boolEnableEncryptRequest?: boolean | undefined;
  boolEnableEncryptedPic?: boolean | undefined;
  uint32CtrlFlag?: number | undefined;
}

export interface SubCmd0x501RspbodyDynTimeOutConf {
  uint32Tbase2g?: number | undefined;
  uint32Tbase3g?: number | undefined;
  uint32Tbase4g?: number | undefined;
  uint32TbaseWifi?: number | undefined;
  uint32Torg2g?: number | undefined;
  uint32Torg3g?: number | undefined;
  uint32Torg4g?: number | undefined;
  uint32TorgWifi?: number | undefined;
  uint32MaxTimeout?: number | undefined;
  uint32EnableDynTimeout?: number | undefined;
  uint32MaxTimeout2g?: number | undefined;
  uint32MaxTimeout3g?: number | undefined;
  uint32MaxTimeout4g?: number | undefined;
  uint32MaxTimeoutWifi?: number | undefined;
  uint32HbTimeout2g?: number | undefined;
  uint32HbTimeout3g?: number | undefined;
  uint32HbTimeout4g?: number | undefined;
  uint32HbTimeoutWifi?: number | undefined;
  uint32HbTimeoutDefault?: number | undefined;
}

export interface SubCmd0x501RspbodyIp6Addr {
  uint32Type?: number | undefined;
  bytesIp6?: Uint8Array | undefined;
  uint32Port?: number | undefined;
  uint32Area?: number | undefined;
  uint32SameIsp?: number | undefined;
}

export interface SubCmd0x501RspbodyIpAddr {
  uint32Type?: number | undefined;
  uint32Ip?: number | undefined;
  uint32Port?: number | undefined;
  uint32Area?: number | undefined;
  uint32SameIsp?: number | undefined;
}

export interface SubCmd0x501RspbodyIpLearnConf {
  uint32RefreshCachedIp?: number | undefined;
  uint32EnableIpLearn?: number | undefined;
}

export interface SubCmd0x501RspbodyNetSegConf {
  uint32NetType?: number | undefined;
  uint32Segsize?: number | undefined;
  uint32Segnum?: number | undefined;
  uint32Curconnnum?: number | undefined;
}

export interface SubCmd0x501RspbodyOpenUpConf {
  boolEnableOpenup?: boolean | undefined;
  uint32PreSendSegnum?: number | undefined;
  uint32PreSendSegnum3g?: number | undefined;
  uint32PreSendSegnum4g?: number | undefined;
  uint32PreSendSegnumWifi?: number | undefined;
}

export interface SubCmd0x501RspbodyPTVConf {
  uint32ChannelType?: number | undefined;
  rptMsgNetsegconf: SubCmd0x501RspbodyNetSegConf[];
  boolOpenHardwareCodec?: boolean | undefined;
}

export interface SubCmd0x501RspbodyShortVideoConf {
  uint32ChannelType?: number | undefined;
  rptMsgNetsegconf: SubCmd0x501RspbodyNetSegConf[];
  boolOpenHardwareCodec?: boolean | undefined;
  boolSendAheadSignal?: boolean | undefined;
}

export interface SubCmd0x501RspbodySrvAddrs {
  uint32ServiceType?: number | undefined;
  rptMsgAddrs: SubCmd0x501RspbodyIpAddr[];
  uint32FragmentSize?: number | undefined;
  rptMsgNetsegconf: SubCmd0x501RspbodyNetSegConf[];
  rptMsgAddrsV6: SubCmd0x501RspbodyIp6Addr[];
}

export interface SubCmd0x501Rspbody {
  bytesHttpconnSigSession?: Uint8Array | undefined;
  bytesSessionKey?: Uint8Array | undefined;
  rptMsgHttpconnAddrs: SubCmd0x501RspbodySrvAddrs[];
  uint32PreConnection?: number | undefined;
  uint32CsConn?: number | undefined;
  msgIpLearnConf?: SubCmd0x501RspbodyIpLearnConf | undefined;
  msgDynTimeoutConf?: SubCmd0x501RspbodyDynTimeOutConf | undefined;
  msgOpenUpConf?: SubCmd0x501RspbodyOpenUpConf | undefined;
  msgDownloadEncryptConf?: SubCmd0x501RspbodyDownloadEncryptConf | undefined;
  msgShortVideoConf?: SubCmd0x501RspbodyShortVideoConf | undefined;
  msgPtvConf?: SubCmd0x501RspbodyPTVConf | undefined;
  uint32ShareType?: number | undefined;
  uint32ShareChannel?: number | undefined;
  uint32FmtPolicy?: number | undefined;
  uint32BigdataPolicy?: number | undefined;
  uint32ConnAttemptDelay?: number | undefined;
}

function createBaseReqBody(): ReqBody {
  return { msgSubcmd0x501ReqBody: undefined };
}

export const ReqBody: MessageFns<ReqBody> = {
  encode(message: ReqBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgSubcmd0x501ReqBody !== undefined) {
      SubCmd0x501ReqBody.encode(message.msgSubcmd0x501ReqBody, writer.uint32(10250).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReqBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReqBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1281: {
          if (tag !== 10250) {
            break;
          }

          message.msgSubcmd0x501ReqBody = SubCmd0x501ReqBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReqBody {
    return {
      msgSubcmd0x501ReqBody: isSet(object.msgSubcmd0x501ReqBody)
        ? SubCmd0x501ReqBody.fromJSON(object.msgSubcmd0x501ReqBody)
        : undefined,
    };
  },

  toJSON(message: ReqBody): unknown {
    const obj: any = {};
    if (message.msgSubcmd0x501ReqBody !== undefined) {
      obj.msgSubcmd0x501ReqBody = SubCmd0x501ReqBody.toJSON(message.msgSubcmd0x501ReqBody);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReqBody>, I>>(base?: I): ReqBody {
    return ReqBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReqBody>, I>>(object: I): ReqBody {
    const message = createBaseReqBody();
    message.msgSubcmd0x501ReqBody =
      (object.msgSubcmd0x501ReqBody !== undefined && object.msgSubcmd0x501ReqBody !== null)
        ? SubCmd0x501ReqBody.fromPartial(object.msgSubcmd0x501ReqBody)
        : undefined;
    return message;
  },
};

function createBaseRspBody(): RspBody {
  return { msgSubcmd0x501RspBody: undefined };
}

export const RspBody: MessageFns<RspBody> = {
  encode(message: RspBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgSubcmd0x501RspBody !== undefined) {
      SubCmd0x501Rspbody.encode(message.msgSubcmd0x501RspBody, writer.uint32(10250).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RspBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRspBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1281: {
          if (tag !== 10250) {
            break;
          }

          message.msgSubcmd0x501RspBody = SubCmd0x501Rspbody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RspBody {
    return {
      msgSubcmd0x501RspBody: isSet(object.msgSubcmd0x501RspBody)
        ? SubCmd0x501Rspbody.fromJSON(object.msgSubcmd0x501RspBody)
        : undefined,
    };
  },

  toJSON(message: RspBody): unknown {
    const obj: any = {};
    if (message.msgSubcmd0x501RspBody !== undefined) {
      obj.msgSubcmd0x501RspBody = SubCmd0x501Rspbody.toJSON(message.msgSubcmd0x501RspBody);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RspBody>, I>>(base?: I): RspBody {
    return RspBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RspBody>, I>>(object: I): RspBody {
    const message = createBaseRspBody();
    message.msgSubcmd0x501RspBody =
      (object.msgSubcmd0x501RspBody !== undefined && object.msgSubcmd0x501RspBody !== null)
        ? SubCmd0x501Rspbody.fromPartial(object.msgSubcmd0x501RspBody)
        : undefined;
    return message;
  },
};

function createBaseSubCmd0x501ReqBody(): SubCmd0x501ReqBody {
  return {
    uint64Uin: undefined,
    uint32IdcId: undefined,
    uint32Appid: undefined,
    uint32LoginSigType: undefined,
    bytesLoginSigTicket: undefined,
    uint32RequestFlag: undefined,
    rptUint32ServiceTypes: [],
    uint32Bid: undefined,
    uint32Term: undefined,
    uint32Plat: undefined,
    uint32Net: undefined,
    uint32Caller: undefined,
    bytesVer: undefined,
  };
}

export const SubCmd0x501ReqBody: MessageFns<SubCmd0x501ReqBody> = {
  encode(message: SubCmd0x501ReqBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint64Uin !== undefined) {
      writer.uint32(8).uint64(message.uint64Uin);
    }
    if (message.uint32IdcId !== undefined) {
      writer.uint32(16).uint32(message.uint32IdcId);
    }
    if (message.uint32Appid !== undefined) {
      writer.uint32(24).uint32(message.uint32Appid);
    }
    if (message.uint32LoginSigType !== undefined) {
      writer.uint32(32).uint32(message.uint32LoginSigType);
    }
    if (message.bytesLoginSigTicket !== undefined) {
      writer.uint32(42).bytes(message.bytesLoginSigTicket);
    }
    if (message.uint32RequestFlag !== undefined) {
      writer.uint32(48).uint32(message.uint32RequestFlag);
    }
    writer.uint32(58).fork();
    for (const v of message.rptUint32ServiceTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.uint32Bid !== undefined) {
      writer.uint32(64).uint32(message.uint32Bid);
    }
    if (message.uint32Term !== undefined) {
      writer.uint32(72).uint32(message.uint32Term);
    }
    if (message.uint32Plat !== undefined) {
      writer.uint32(80).uint32(message.uint32Plat);
    }
    if (message.uint32Net !== undefined) {
      writer.uint32(88).uint32(message.uint32Net);
    }
    if (message.uint32Caller !== undefined) {
      writer.uint32(96).uint32(message.uint32Caller);
    }
    if (message.bytesVer !== undefined) {
      writer.uint32(122).string(message.bytesVer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501ReqBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501ReqBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint64Uin = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint32IdcId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32Appid = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32LoginSigType = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bytesLoginSigTicket = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.uint32RequestFlag = reader.uint32();
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.rptUint32ServiceTypes.push(reader.int32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rptUint32ServiceTypes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.uint32Bid = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.uint32Term = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.uint32Plat = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.uint32Net = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.uint32Caller = reader.uint32();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.bytesVer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501ReqBody {
    return {
      uint64Uin: isSet(object.uint64Uin) ? globalThis.Number(object.uint64Uin) : undefined,
      uint32IdcId: isSet(object.uint32IdcId) ? globalThis.Number(object.uint32IdcId) : undefined,
      uint32Appid: isSet(object.uint32Appid) ? globalThis.Number(object.uint32Appid) : undefined,
      uint32LoginSigType: isSet(object.uint32LoginSigType) ? globalThis.Number(object.uint32LoginSigType) : undefined,
      bytesLoginSigTicket: isSet(object.bytesLoginSigTicket) ? bytesFromBase64(object.bytesLoginSigTicket) : undefined,
      uint32RequestFlag: isSet(object.uint32RequestFlag) ? globalThis.Number(object.uint32RequestFlag) : undefined,
      rptUint32ServiceTypes: globalThis.Array.isArray(object?.rptUint32ServiceTypes)
        ? object.rptUint32ServiceTypes.map((e: any) => globalThis.Number(e))
        : [],
      uint32Bid: isSet(object.uint32Bid) ? globalThis.Number(object.uint32Bid) : undefined,
      uint32Term: isSet(object.uint32Term) ? globalThis.Number(object.uint32Term) : undefined,
      uint32Plat: isSet(object.uint32Plat) ? globalThis.Number(object.uint32Plat) : undefined,
      uint32Net: isSet(object.uint32Net) ? globalThis.Number(object.uint32Net) : undefined,
      uint32Caller: isSet(object.uint32Caller) ? globalThis.Number(object.uint32Caller) : undefined,
      bytesVer: isSet(object.bytesVer) ? globalThis.String(object.bytesVer) : undefined,
    };
  },

  toJSON(message: SubCmd0x501ReqBody): unknown {
    const obj: any = {};
    if (message.uint64Uin !== undefined) {
      obj.uint64Uin = Math.round(message.uint64Uin);
    }
    if (message.uint32IdcId !== undefined) {
      obj.uint32IdcId = Math.round(message.uint32IdcId);
    }
    if (message.uint32Appid !== undefined) {
      obj.uint32Appid = Math.round(message.uint32Appid);
    }
    if (message.uint32LoginSigType !== undefined) {
      obj.uint32LoginSigType = Math.round(message.uint32LoginSigType);
    }
    if (message.bytesLoginSigTicket !== undefined) {
      obj.bytesLoginSigTicket = base64FromBytes(message.bytesLoginSigTicket);
    }
    if (message.uint32RequestFlag !== undefined) {
      obj.uint32RequestFlag = Math.round(message.uint32RequestFlag);
    }
    if (message.rptUint32ServiceTypes?.length) {
      obj.rptUint32ServiceTypes = message.rptUint32ServiceTypes.map((e) => Math.round(e));
    }
    if (message.uint32Bid !== undefined) {
      obj.uint32Bid = Math.round(message.uint32Bid);
    }
    if (message.uint32Term !== undefined) {
      obj.uint32Term = Math.round(message.uint32Term);
    }
    if (message.uint32Plat !== undefined) {
      obj.uint32Plat = Math.round(message.uint32Plat);
    }
    if (message.uint32Net !== undefined) {
      obj.uint32Net = Math.round(message.uint32Net);
    }
    if (message.uint32Caller !== undefined) {
      obj.uint32Caller = Math.round(message.uint32Caller);
    }
    if (message.bytesVer !== undefined) {
      obj.bytesVer = message.bytesVer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501ReqBody>, I>>(base?: I): SubCmd0x501ReqBody {
    return SubCmd0x501ReqBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501ReqBody>, I>>(object: I): SubCmd0x501ReqBody {
    const message = createBaseSubCmd0x501ReqBody();
    message.uint64Uin = object.uint64Uin ?? undefined;
    message.uint32IdcId = object.uint32IdcId ?? undefined;
    message.uint32Appid = object.uint32Appid ?? undefined;
    message.uint32LoginSigType = object.uint32LoginSigType ?? undefined;
    message.bytesLoginSigTicket = object.bytesLoginSigTicket ?? undefined;
    message.uint32RequestFlag = object.uint32RequestFlag ?? undefined;
    message.rptUint32ServiceTypes = object.rptUint32ServiceTypes?.map((e) => e) || [];
    message.uint32Bid = object.uint32Bid ?? undefined;
    message.uint32Term = object.uint32Term ?? undefined;
    message.uint32Plat = object.uint32Plat ?? undefined;
    message.uint32Net = object.uint32Net ?? undefined;
    message.uint32Caller = object.uint32Caller ?? undefined;
    message.bytesVer = object.bytesVer ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyDownloadEncryptConf(): SubCmd0x501RspbodyDownloadEncryptConf {
  return { boolEnableEncryptRequest: undefined, boolEnableEncryptedPic: undefined, uint32CtrlFlag: undefined };
}

export const SubCmd0x501RspbodyDownloadEncryptConf: MessageFns<SubCmd0x501RspbodyDownloadEncryptConf> = {
  encode(message: SubCmd0x501RspbodyDownloadEncryptConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boolEnableEncryptRequest !== undefined) {
      writer.uint32(8).bool(message.boolEnableEncryptRequest);
    }
    if (message.boolEnableEncryptedPic !== undefined) {
      writer.uint32(16).bool(message.boolEnableEncryptedPic);
    }
    if (message.uint32CtrlFlag !== undefined) {
      writer.uint32(24).uint32(message.uint32CtrlFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyDownloadEncryptConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyDownloadEncryptConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.boolEnableEncryptRequest = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.boolEnableEncryptedPic = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32CtrlFlag = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyDownloadEncryptConf {
    return {
      boolEnableEncryptRequest: isSet(object.boolEnableEncryptRequest)
        ? globalThis.Boolean(object.boolEnableEncryptRequest)
        : undefined,
      boolEnableEncryptedPic: isSet(object.boolEnableEncryptedPic)
        ? globalThis.Boolean(object.boolEnableEncryptedPic)
        : undefined,
      uint32CtrlFlag: isSet(object.uint32CtrlFlag) ? globalThis.Number(object.uint32CtrlFlag) : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyDownloadEncryptConf): unknown {
    const obj: any = {};
    if (message.boolEnableEncryptRequest !== undefined) {
      obj.boolEnableEncryptRequest = message.boolEnableEncryptRequest;
    }
    if (message.boolEnableEncryptedPic !== undefined) {
      obj.boolEnableEncryptedPic = message.boolEnableEncryptedPic;
    }
    if (message.uint32CtrlFlag !== undefined) {
      obj.uint32CtrlFlag = Math.round(message.uint32CtrlFlag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyDownloadEncryptConf>, I>>(
    base?: I,
  ): SubCmd0x501RspbodyDownloadEncryptConf {
    return SubCmd0x501RspbodyDownloadEncryptConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyDownloadEncryptConf>, I>>(
    object: I,
  ): SubCmd0x501RspbodyDownloadEncryptConf {
    const message = createBaseSubCmd0x501RspbodyDownloadEncryptConf();
    message.boolEnableEncryptRequest = object.boolEnableEncryptRequest ?? undefined;
    message.boolEnableEncryptedPic = object.boolEnableEncryptedPic ?? undefined;
    message.uint32CtrlFlag = object.uint32CtrlFlag ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyDynTimeOutConf(): SubCmd0x501RspbodyDynTimeOutConf {
  return {
    uint32Tbase2g: undefined,
    uint32Tbase3g: undefined,
    uint32Tbase4g: undefined,
    uint32TbaseWifi: undefined,
    uint32Torg2g: undefined,
    uint32Torg3g: undefined,
    uint32Torg4g: undefined,
    uint32TorgWifi: undefined,
    uint32MaxTimeout: undefined,
    uint32EnableDynTimeout: undefined,
    uint32MaxTimeout2g: undefined,
    uint32MaxTimeout3g: undefined,
    uint32MaxTimeout4g: undefined,
    uint32MaxTimeoutWifi: undefined,
    uint32HbTimeout2g: undefined,
    uint32HbTimeout3g: undefined,
    uint32HbTimeout4g: undefined,
    uint32HbTimeoutWifi: undefined,
    uint32HbTimeoutDefault: undefined,
  };
}

export const SubCmd0x501RspbodyDynTimeOutConf: MessageFns<SubCmd0x501RspbodyDynTimeOutConf> = {
  encode(message: SubCmd0x501RspbodyDynTimeOutConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32Tbase2g !== undefined) {
      writer.uint32(8).uint32(message.uint32Tbase2g);
    }
    if (message.uint32Tbase3g !== undefined) {
      writer.uint32(16).uint32(message.uint32Tbase3g);
    }
    if (message.uint32Tbase4g !== undefined) {
      writer.uint32(24).uint32(message.uint32Tbase4g);
    }
    if (message.uint32TbaseWifi !== undefined) {
      writer.uint32(32).uint32(message.uint32TbaseWifi);
    }
    if (message.uint32Torg2g !== undefined) {
      writer.uint32(40).uint32(message.uint32Torg2g);
    }
    if (message.uint32Torg3g !== undefined) {
      writer.uint32(48).uint32(message.uint32Torg3g);
    }
    if (message.uint32Torg4g !== undefined) {
      writer.uint32(56).uint32(message.uint32Torg4g);
    }
    if (message.uint32TorgWifi !== undefined) {
      writer.uint32(64).uint32(message.uint32TorgWifi);
    }
    if (message.uint32MaxTimeout !== undefined) {
      writer.uint32(72).uint32(message.uint32MaxTimeout);
    }
    if (message.uint32EnableDynTimeout !== undefined) {
      writer.uint32(80).uint32(message.uint32EnableDynTimeout);
    }
    if (message.uint32MaxTimeout2g !== undefined) {
      writer.uint32(88).uint32(message.uint32MaxTimeout2g);
    }
    if (message.uint32MaxTimeout3g !== undefined) {
      writer.uint32(96).uint32(message.uint32MaxTimeout3g);
    }
    if (message.uint32MaxTimeout4g !== undefined) {
      writer.uint32(104).uint32(message.uint32MaxTimeout4g);
    }
    if (message.uint32MaxTimeoutWifi !== undefined) {
      writer.uint32(112).uint32(message.uint32MaxTimeoutWifi);
    }
    if (message.uint32HbTimeout2g !== undefined) {
      writer.uint32(120).uint32(message.uint32HbTimeout2g);
    }
    if (message.uint32HbTimeout3g !== undefined) {
      writer.uint32(128).uint32(message.uint32HbTimeout3g);
    }
    if (message.uint32HbTimeout4g !== undefined) {
      writer.uint32(136).uint32(message.uint32HbTimeout4g);
    }
    if (message.uint32HbTimeoutWifi !== undefined) {
      writer.uint32(144).uint32(message.uint32HbTimeoutWifi);
    }
    if (message.uint32HbTimeoutDefault !== undefined) {
      writer.uint32(152).uint32(message.uint32HbTimeoutDefault);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyDynTimeOutConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyDynTimeOutConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32Tbase2g = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint32Tbase3g = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32Tbase4g = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32TbaseWifi = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uint32Torg2g = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.uint32Torg3g = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.uint32Torg4g = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.uint32TorgWifi = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.uint32MaxTimeout = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.uint32EnableDynTimeout = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.uint32MaxTimeout2g = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.uint32MaxTimeout3g = reader.uint32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.uint32MaxTimeout4g = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.uint32MaxTimeoutWifi = reader.uint32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.uint32HbTimeout2g = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.uint32HbTimeout3g = reader.uint32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.uint32HbTimeout4g = reader.uint32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.uint32HbTimeoutWifi = reader.uint32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.uint32HbTimeoutDefault = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyDynTimeOutConf {
    return {
      uint32Tbase2g: isSet(object.uint32Tbase2g) ? globalThis.Number(object.uint32Tbase2g) : undefined,
      uint32Tbase3g: isSet(object.uint32Tbase3g) ? globalThis.Number(object.uint32Tbase3g) : undefined,
      uint32Tbase4g: isSet(object.uint32Tbase4g) ? globalThis.Number(object.uint32Tbase4g) : undefined,
      uint32TbaseWifi: isSet(object.uint32TbaseWifi) ? globalThis.Number(object.uint32TbaseWifi) : undefined,
      uint32Torg2g: isSet(object.uint32Torg2g) ? globalThis.Number(object.uint32Torg2g) : undefined,
      uint32Torg3g: isSet(object.uint32Torg3g) ? globalThis.Number(object.uint32Torg3g) : undefined,
      uint32Torg4g: isSet(object.uint32Torg4g) ? globalThis.Number(object.uint32Torg4g) : undefined,
      uint32TorgWifi: isSet(object.uint32TorgWifi) ? globalThis.Number(object.uint32TorgWifi) : undefined,
      uint32MaxTimeout: isSet(object.uint32MaxTimeout) ? globalThis.Number(object.uint32MaxTimeout) : undefined,
      uint32EnableDynTimeout: isSet(object.uint32EnableDynTimeout)
        ? globalThis.Number(object.uint32EnableDynTimeout)
        : undefined,
      uint32MaxTimeout2g: isSet(object.uint32MaxTimeout2g) ? globalThis.Number(object.uint32MaxTimeout2g) : undefined,
      uint32MaxTimeout3g: isSet(object.uint32MaxTimeout3g) ? globalThis.Number(object.uint32MaxTimeout3g) : undefined,
      uint32MaxTimeout4g: isSet(object.uint32MaxTimeout4g) ? globalThis.Number(object.uint32MaxTimeout4g) : undefined,
      uint32MaxTimeoutWifi: isSet(object.uint32MaxTimeoutWifi)
        ? globalThis.Number(object.uint32MaxTimeoutWifi)
        : undefined,
      uint32HbTimeout2g: isSet(object.uint32HbTimeout2g) ? globalThis.Number(object.uint32HbTimeout2g) : undefined,
      uint32HbTimeout3g: isSet(object.uint32HbTimeout3g) ? globalThis.Number(object.uint32HbTimeout3g) : undefined,
      uint32HbTimeout4g: isSet(object.uint32HbTimeout4g) ? globalThis.Number(object.uint32HbTimeout4g) : undefined,
      uint32HbTimeoutWifi: isSet(object.uint32HbTimeoutWifi)
        ? globalThis.Number(object.uint32HbTimeoutWifi)
        : undefined,
      uint32HbTimeoutDefault: isSet(object.uint32HbTimeoutDefault)
        ? globalThis.Number(object.uint32HbTimeoutDefault)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyDynTimeOutConf): unknown {
    const obj: any = {};
    if (message.uint32Tbase2g !== undefined) {
      obj.uint32Tbase2g = Math.round(message.uint32Tbase2g);
    }
    if (message.uint32Tbase3g !== undefined) {
      obj.uint32Tbase3g = Math.round(message.uint32Tbase3g);
    }
    if (message.uint32Tbase4g !== undefined) {
      obj.uint32Tbase4g = Math.round(message.uint32Tbase4g);
    }
    if (message.uint32TbaseWifi !== undefined) {
      obj.uint32TbaseWifi = Math.round(message.uint32TbaseWifi);
    }
    if (message.uint32Torg2g !== undefined) {
      obj.uint32Torg2g = Math.round(message.uint32Torg2g);
    }
    if (message.uint32Torg3g !== undefined) {
      obj.uint32Torg3g = Math.round(message.uint32Torg3g);
    }
    if (message.uint32Torg4g !== undefined) {
      obj.uint32Torg4g = Math.round(message.uint32Torg4g);
    }
    if (message.uint32TorgWifi !== undefined) {
      obj.uint32TorgWifi = Math.round(message.uint32TorgWifi);
    }
    if (message.uint32MaxTimeout !== undefined) {
      obj.uint32MaxTimeout = Math.round(message.uint32MaxTimeout);
    }
    if (message.uint32EnableDynTimeout !== undefined) {
      obj.uint32EnableDynTimeout = Math.round(message.uint32EnableDynTimeout);
    }
    if (message.uint32MaxTimeout2g !== undefined) {
      obj.uint32MaxTimeout2g = Math.round(message.uint32MaxTimeout2g);
    }
    if (message.uint32MaxTimeout3g !== undefined) {
      obj.uint32MaxTimeout3g = Math.round(message.uint32MaxTimeout3g);
    }
    if (message.uint32MaxTimeout4g !== undefined) {
      obj.uint32MaxTimeout4g = Math.round(message.uint32MaxTimeout4g);
    }
    if (message.uint32MaxTimeoutWifi !== undefined) {
      obj.uint32MaxTimeoutWifi = Math.round(message.uint32MaxTimeoutWifi);
    }
    if (message.uint32HbTimeout2g !== undefined) {
      obj.uint32HbTimeout2g = Math.round(message.uint32HbTimeout2g);
    }
    if (message.uint32HbTimeout3g !== undefined) {
      obj.uint32HbTimeout3g = Math.round(message.uint32HbTimeout3g);
    }
    if (message.uint32HbTimeout4g !== undefined) {
      obj.uint32HbTimeout4g = Math.round(message.uint32HbTimeout4g);
    }
    if (message.uint32HbTimeoutWifi !== undefined) {
      obj.uint32HbTimeoutWifi = Math.round(message.uint32HbTimeoutWifi);
    }
    if (message.uint32HbTimeoutDefault !== undefined) {
      obj.uint32HbTimeoutDefault = Math.round(message.uint32HbTimeoutDefault);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyDynTimeOutConf>, I>>(
    base?: I,
  ): SubCmd0x501RspbodyDynTimeOutConf {
    return SubCmd0x501RspbodyDynTimeOutConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyDynTimeOutConf>, I>>(
    object: I,
  ): SubCmd0x501RspbodyDynTimeOutConf {
    const message = createBaseSubCmd0x501RspbodyDynTimeOutConf();
    message.uint32Tbase2g = object.uint32Tbase2g ?? undefined;
    message.uint32Tbase3g = object.uint32Tbase3g ?? undefined;
    message.uint32Tbase4g = object.uint32Tbase4g ?? undefined;
    message.uint32TbaseWifi = object.uint32TbaseWifi ?? undefined;
    message.uint32Torg2g = object.uint32Torg2g ?? undefined;
    message.uint32Torg3g = object.uint32Torg3g ?? undefined;
    message.uint32Torg4g = object.uint32Torg4g ?? undefined;
    message.uint32TorgWifi = object.uint32TorgWifi ?? undefined;
    message.uint32MaxTimeout = object.uint32MaxTimeout ?? undefined;
    message.uint32EnableDynTimeout = object.uint32EnableDynTimeout ?? undefined;
    message.uint32MaxTimeout2g = object.uint32MaxTimeout2g ?? undefined;
    message.uint32MaxTimeout3g = object.uint32MaxTimeout3g ?? undefined;
    message.uint32MaxTimeout4g = object.uint32MaxTimeout4g ?? undefined;
    message.uint32MaxTimeoutWifi = object.uint32MaxTimeoutWifi ?? undefined;
    message.uint32HbTimeout2g = object.uint32HbTimeout2g ?? undefined;
    message.uint32HbTimeout3g = object.uint32HbTimeout3g ?? undefined;
    message.uint32HbTimeout4g = object.uint32HbTimeout4g ?? undefined;
    message.uint32HbTimeoutWifi = object.uint32HbTimeoutWifi ?? undefined;
    message.uint32HbTimeoutDefault = object.uint32HbTimeoutDefault ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyIp6Addr(): SubCmd0x501RspbodyIp6Addr {
  return {
    uint32Type: undefined,
    bytesIp6: undefined,
    uint32Port: undefined,
    uint32Area: undefined,
    uint32SameIsp: undefined,
  };
}

export const SubCmd0x501RspbodyIp6Addr: MessageFns<SubCmd0x501RspbodyIp6Addr> = {
  encode(message: SubCmd0x501RspbodyIp6Addr, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32Type !== undefined) {
      writer.uint32(8).uint32(message.uint32Type);
    }
    if (message.bytesIp6 !== undefined) {
      writer.uint32(18).bytes(message.bytesIp6);
    }
    if (message.uint32Port !== undefined) {
      writer.uint32(24).uint32(message.uint32Port);
    }
    if (message.uint32Area !== undefined) {
      writer.uint32(32).uint32(message.uint32Area);
    }
    if (message.uint32SameIsp !== undefined) {
      writer.uint32(40).uint32(message.uint32SameIsp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyIp6Addr {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyIp6Addr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32Type = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bytesIp6 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32Port = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32Area = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uint32SameIsp = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyIp6Addr {
    return {
      uint32Type: isSet(object.uint32Type) ? globalThis.Number(object.uint32Type) : undefined,
      bytesIp6: isSet(object.bytesIp6) ? bytesFromBase64(object.bytesIp6) : undefined,
      uint32Port: isSet(object.uint32Port) ? globalThis.Number(object.uint32Port) : undefined,
      uint32Area: isSet(object.uint32Area) ? globalThis.Number(object.uint32Area) : undefined,
      uint32SameIsp: isSet(object.uint32SameIsp) ? globalThis.Number(object.uint32SameIsp) : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyIp6Addr): unknown {
    const obj: any = {};
    if (message.uint32Type !== undefined) {
      obj.uint32Type = Math.round(message.uint32Type);
    }
    if (message.bytesIp6 !== undefined) {
      obj.bytesIp6 = base64FromBytes(message.bytesIp6);
    }
    if (message.uint32Port !== undefined) {
      obj.uint32Port = Math.round(message.uint32Port);
    }
    if (message.uint32Area !== undefined) {
      obj.uint32Area = Math.round(message.uint32Area);
    }
    if (message.uint32SameIsp !== undefined) {
      obj.uint32SameIsp = Math.round(message.uint32SameIsp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyIp6Addr>, I>>(base?: I): SubCmd0x501RspbodyIp6Addr {
    return SubCmd0x501RspbodyIp6Addr.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyIp6Addr>, I>>(object: I): SubCmd0x501RspbodyIp6Addr {
    const message = createBaseSubCmd0x501RspbodyIp6Addr();
    message.uint32Type = object.uint32Type ?? undefined;
    message.bytesIp6 = object.bytesIp6 ?? undefined;
    message.uint32Port = object.uint32Port ?? undefined;
    message.uint32Area = object.uint32Area ?? undefined;
    message.uint32SameIsp = object.uint32SameIsp ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyIpAddr(): SubCmd0x501RspbodyIpAddr {
  return {
    uint32Type: undefined,
    uint32Ip: undefined,
    uint32Port: undefined,
    uint32Area: undefined,
    uint32SameIsp: undefined,
  };
}

export const SubCmd0x501RspbodyIpAddr: MessageFns<SubCmd0x501RspbodyIpAddr> = {
  encode(message: SubCmd0x501RspbodyIpAddr, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32Type !== undefined) {
      writer.uint32(8).uint32(message.uint32Type);
    }
    if (message.uint32Ip !== undefined) {
      writer.uint32(21).fixed32(message.uint32Ip);
    }
    if (message.uint32Port !== undefined) {
      writer.uint32(24).uint32(message.uint32Port);
    }
    if (message.uint32Area !== undefined) {
      writer.uint32(32).uint32(message.uint32Area);
    }
    if (message.uint32SameIsp !== undefined) {
      writer.uint32(40).uint32(message.uint32SameIsp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyIpAddr {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyIpAddr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32Type = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.uint32Ip = reader.fixed32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32Port = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32Area = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uint32SameIsp = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyIpAddr {
    return {
      uint32Type: isSet(object.uint32Type) ? globalThis.Number(object.uint32Type) : undefined,
      uint32Ip: isSet(object.uint32Ip) ? globalThis.Number(object.uint32Ip) : undefined,
      uint32Port: isSet(object.uint32Port) ? globalThis.Number(object.uint32Port) : undefined,
      uint32Area: isSet(object.uint32Area) ? globalThis.Number(object.uint32Area) : undefined,
      uint32SameIsp: isSet(object.uint32SameIsp) ? globalThis.Number(object.uint32SameIsp) : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyIpAddr): unknown {
    const obj: any = {};
    if (message.uint32Type !== undefined) {
      obj.uint32Type = Math.round(message.uint32Type);
    }
    if (message.uint32Ip !== undefined) {
      obj.uint32Ip = Math.round(message.uint32Ip);
    }
    if (message.uint32Port !== undefined) {
      obj.uint32Port = Math.round(message.uint32Port);
    }
    if (message.uint32Area !== undefined) {
      obj.uint32Area = Math.round(message.uint32Area);
    }
    if (message.uint32SameIsp !== undefined) {
      obj.uint32SameIsp = Math.round(message.uint32SameIsp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyIpAddr>, I>>(base?: I): SubCmd0x501RspbodyIpAddr {
    return SubCmd0x501RspbodyIpAddr.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyIpAddr>, I>>(object: I): SubCmd0x501RspbodyIpAddr {
    const message = createBaseSubCmd0x501RspbodyIpAddr();
    message.uint32Type = object.uint32Type ?? undefined;
    message.uint32Ip = object.uint32Ip ?? undefined;
    message.uint32Port = object.uint32Port ?? undefined;
    message.uint32Area = object.uint32Area ?? undefined;
    message.uint32SameIsp = object.uint32SameIsp ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyIpLearnConf(): SubCmd0x501RspbodyIpLearnConf {
  return { uint32RefreshCachedIp: undefined, uint32EnableIpLearn: undefined };
}

export const SubCmd0x501RspbodyIpLearnConf: MessageFns<SubCmd0x501RspbodyIpLearnConf> = {
  encode(message: SubCmd0x501RspbodyIpLearnConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32RefreshCachedIp !== undefined) {
      writer.uint32(8).uint32(message.uint32RefreshCachedIp);
    }
    if (message.uint32EnableIpLearn !== undefined) {
      writer.uint32(16).uint32(message.uint32EnableIpLearn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyIpLearnConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyIpLearnConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32RefreshCachedIp = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint32EnableIpLearn = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyIpLearnConf {
    return {
      uint32RefreshCachedIp: isSet(object.uint32RefreshCachedIp)
        ? globalThis.Number(object.uint32RefreshCachedIp)
        : undefined,
      uint32EnableIpLearn: isSet(object.uint32EnableIpLearn)
        ? globalThis.Number(object.uint32EnableIpLearn)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyIpLearnConf): unknown {
    const obj: any = {};
    if (message.uint32RefreshCachedIp !== undefined) {
      obj.uint32RefreshCachedIp = Math.round(message.uint32RefreshCachedIp);
    }
    if (message.uint32EnableIpLearn !== undefined) {
      obj.uint32EnableIpLearn = Math.round(message.uint32EnableIpLearn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyIpLearnConf>, I>>(base?: I): SubCmd0x501RspbodyIpLearnConf {
    return SubCmd0x501RspbodyIpLearnConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyIpLearnConf>, I>>(
    object: I,
  ): SubCmd0x501RspbodyIpLearnConf {
    const message = createBaseSubCmd0x501RspbodyIpLearnConf();
    message.uint32RefreshCachedIp = object.uint32RefreshCachedIp ?? undefined;
    message.uint32EnableIpLearn = object.uint32EnableIpLearn ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyNetSegConf(): SubCmd0x501RspbodyNetSegConf {
  return { uint32NetType: undefined, uint32Segsize: undefined, uint32Segnum: undefined, uint32Curconnnum: undefined };
}

export const SubCmd0x501RspbodyNetSegConf: MessageFns<SubCmd0x501RspbodyNetSegConf> = {
  encode(message: SubCmd0x501RspbodyNetSegConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32NetType !== undefined) {
      writer.uint32(8).uint32(message.uint32NetType);
    }
    if (message.uint32Segsize !== undefined) {
      writer.uint32(16).uint32(message.uint32Segsize);
    }
    if (message.uint32Segnum !== undefined) {
      writer.uint32(24).uint32(message.uint32Segnum);
    }
    if (message.uint32Curconnnum !== undefined) {
      writer.uint32(32).uint32(message.uint32Curconnnum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyNetSegConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyNetSegConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32NetType = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint32Segsize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32Segnum = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32Curconnnum = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyNetSegConf {
    return {
      uint32NetType: isSet(object.uint32NetType) ? globalThis.Number(object.uint32NetType) : undefined,
      uint32Segsize: isSet(object.uint32Segsize) ? globalThis.Number(object.uint32Segsize) : undefined,
      uint32Segnum: isSet(object.uint32Segnum) ? globalThis.Number(object.uint32Segnum) : undefined,
      uint32Curconnnum: isSet(object.uint32Curconnnum) ? globalThis.Number(object.uint32Curconnnum) : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyNetSegConf): unknown {
    const obj: any = {};
    if (message.uint32NetType !== undefined) {
      obj.uint32NetType = Math.round(message.uint32NetType);
    }
    if (message.uint32Segsize !== undefined) {
      obj.uint32Segsize = Math.round(message.uint32Segsize);
    }
    if (message.uint32Segnum !== undefined) {
      obj.uint32Segnum = Math.round(message.uint32Segnum);
    }
    if (message.uint32Curconnnum !== undefined) {
      obj.uint32Curconnnum = Math.round(message.uint32Curconnnum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyNetSegConf>, I>>(base?: I): SubCmd0x501RspbodyNetSegConf {
    return SubCmd0x501RspbodyNetSegConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyNetSegConf>, I>>(object: I): SubCmd0x501RspbodyNetSegConf {
    const message = createBaseSubCmd0x501RspbodyNetSegConf();
    message.uint32NetType = object.uint32NetType ?? undefined;
    message.uint32Segsize = object.uint32Segsize ?? undefined;
    message.uint32Segnum = object.uint32Segnum ?? undefined;
    message.uint32Curconnnum = object.uint32Curconnnum ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyOpenUpConf(): SubCmd0x501RspbodyOpenUpConf {
  return {
    boolEnableOpenup: undefined,
    uint32PreSendSegnum: undefined,
    uint32PreSendSegnum3g: undefined,
    uint32PreSendSegnum4g: undefined,
    uint32PreSendSegnumWifi: undefined,
  };
}

export const SubCmd0x501RspbodyOpenUpConf: MessageFns<SubCmd0x501RspbodyOpenUpConf> = {
  encode(message: SubCmd0x501RspbodyOpenUpConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boolEnableOpenup !== undefined) {
      writer.uint32(8).bool(message.boolEnableOpenup);
    }
    if (message.uint32PreSendSegnum !== undefined) {
      writer.uint32(16).uint32(message.uint32PreSendSegnum);
    }
    if (message.uint32PreSendSegnum3g !== undefined) {
      writer.uint32(24).uint32(message.uint32PreSendSegnum3g);
    }
    if (message.uint32PreSendSegnum4g !== undefined) {
      writer.uint32(32).uint32(message.uint32PreSendSegnum4g);
    }
    if (message.uint32PreSendSegnumWifi !== undefined) {
      writer.uint32(40).uint32(message.uint32PreSendSegnumWifi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyOpenUpConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyOpenUpConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.boolEnableOpenup = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.uint32PreSendSegnum = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32PreSendSegnum3g = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32PreSendSegnum4g = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uint32PreSendSegnumWifi = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyOpenUpConf {
    return {
      boolEnableOpenup: isSet(object.boolEnableOpenup) ? globalThis.Boolean(object.boolEnableOpenup) : undefined,
      uint32PreSendSegnum: isSet(object.uint32PreSendSegnum)
        ? globalThis.Number(object.uint32PreSendSegnum)
        : undefined,
      uint32PreSendSegnum3g: isSet(object.uint32PreSendSegnum3g)
        ? globalThis.Number(object.uint32PreSendSegnum3g)
        : undefined,
      uint32PreSendSegnum4g: isSet(object.uint32PreSendSegnum4g)
        ? globalThis.Number(object.uint32PreSendSegnum4g)
        : undefined,
      uint32PreSendSegnumWifi: isSet(object.uint32PreSendSegnumWifi)
        ? globalThis.Number(object.uint32PreSendSegnumWifi)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyOpenUpConf): unknown {
    const obj: any = {};
    if (message.boolEnableOpenup !== undefined) {
      obj.boolEnableOpenup = message.boolEnableOpenup;
    }
    if (message.uint32PreSendSegnum !== undefined) {
      obj.uint32PreSendSegnum = Math.round(message.uint32PreSendSegnum);
    }
    if (message.uint32PreSendSegnum3g !== undefined) {
      obj.uint32PreSendSegnum3g = Math.round(message.uint32PreSendSegnum3g);
    }
    if (message.uint32PreSendSegnum4g !== undefined) {
      obj.uint32PreSendSegnum4g = Math.round(message.uint32PreSendSegnum4g);
    }
    if (message.uint32PreSendSegnumWifi !== undefined) {
      obj.uint32PreSendSegnumWifi = Math.round(message.uint32PreSendSegnumWifi);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyOpenUpConf>, I>>(base?: I): SubCmd0x501RspbodyOpenUpConf {
    return SubCmd0x501RspbodyOpenUpConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyOpenUpConf>, I>>(object: I): SubCmd0x501RspbodyOpenUpConf {
    const message = createBaseSubCmd0x501RspbodyOpenUpConf();
    message.boolEnableOpenup = object.boolEnableOpenup ?? undefined;
    message.uint32PreSendSegnum = object.uint32PreSendSegnum ?? undefined;
    message.uint32PreSendSegnum3g = object.uint32PreSendSegnum3g ?? undefined;
    message.uint32PreSendSegnum4g = object.uint32PreSendSegnum4g ?? undefined;
    message.uint32PreSendSegnumWifi = object.uint32PreSendSegnumWifi ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyPTVConf(): SubCmd0x501RspbodyPTVConf {
  return { uint32ChannelType: undefined, rptMsgNetsegconf: [], boolOpenHardwareCodec: undefined };
}

export const SubCmd0x501RspbodyPTVConf: MessageFns<SubCmd0x501RspbodyPTVConf> = {
  encode(message: SubCmd0x501RspbodyPTVConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32ChannelType !== undefined) {
      writer.uint32(8).uint32(message.uint32ChannelType);
    }
    for (const v of message.rptMsgNetsegconf) {
      SubCmd0x501RspbodyNetSegConf.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.boolOpenHardwareCodec !== undefined) {
      writer.uint32(24).bool(message.boolOpenHardwareCodec);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyPTVConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyPTVConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32ChannelType = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rptMsgNetsegconf.push(SubCmd0x501RspbodyNetSegConf.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.boolOpenHardwareCodec = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyPTVConf {
    return {
      uint32ChannelType: isSet(object.uint32ChannelType) ? globalThis.Number(object.uint32ChannelType) : undefined,
      rptMsgNetsegconf: globalThis.Array.isArray(object?.rptMsgNetsegconf)
        ? object.rptMsgNetsegconf.map((e: any) => SubCmd0x501RspbodyNetSegConf.fromJSON(e))
        : [],
      boolOpenHardwareCodec: isSet(object.boolOpenHardwareCodec)
        ? globalThis.Boolean(object.boolOpenHardwareCodec)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyPTVConf): unknown {
    const obj: any = {};
    if (message.uint32ChannelType !== undefined) {
      obj.uint32ChannelType = Math.round(message.uint32ChannelType);
    }
    if (message.rptMsgNetsegconf?.length) {
      obj.rptMsgNetsegconf = message.rptMsgNetsegconf.map((e) => SubCmd0x501RspbodyNetSegConf.toJSON(e));
    }
    if (message.boolOpenHardwareCodec !== undefined) {
      obj.boolOpenHardwareCodec = message.boolOpenHardwareCodec;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyPTVConf>, I>>(base?: I): SubCmd0x501RspbodyPTVConf {
    return SubCmd0x501RspbodyPTVConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyPTVConf>, I>>(object: I): SubCmd0x501RspbodyPTVConf {
    const message = createBaseSubCmd0x501RspbodyPTVConf();
    message.uint32ChannelType = object.uint32ChannelType ?? undefined;
    message.rptMsgNetsegconf = object.rptMsgNetsegconf?.map((e) => SubCmd0x501RspbodyNetSegConf.fromPartial(e)) || [];
    message.boolOpenHardwareCodec = object.boolOpenHardwareCodec ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodyShortVideoConf(): SubCmd0x501RspbodyShortVideoConf {
  return {
    uint32ChannelType: undefined,
    rptMsgNetsegconf: [],
    boolOpenHardwareCodec: undefined,
    boolSendAheadSignal: undefined,
  };
}

export const SubCmd0x501RspbodyShortVideoConf: MessageFns<SubCmd0x501RspbodyShortVideoConf> = {
  encode(message: SubCmd0x501RspbodyShortVideoConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32ChannelType !== undefined) {
      writer.uint32(8).uint32(message.uint32ChannelType);
    }
    for (const v of message.rptMsgNetsegconf) {
      SubCmd0x501RspbodyNetSegConf.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.boolOpenHardwareCodec !== undefined) {
      writer.uint32(24).bool(message.boolOpenHardwareCodec);
    }
    if (message.boolSendAheadSignal !== undefined) {
      writer.uint32(32).bool(message.boolSendAheadSignal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodyShortVideoConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodyShortVideoConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32ChannelType = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rptMsgNetsegconf.push(SubCmd0x501RspbodyNetSegConf.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.boolOpenHardwareCodec = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.boolSendAheadSignal = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodyShortVideoConf {
    return {
      uint32ChannelType: isSet(object.uint32ChannelType) ? globalThis.Number(object.uint32ChannelType) : undefined,
      rptMsgNetsegconf: globalThis.Array.isArray(object?.rptMsgNetsegconf)
        ? object.rptMsgNetsegconf.map((e: any) => SubCmd0x501RspbodyNetSegConf.fromJSON(e))
        : [],
      boolOpenHardwareCodec: isSet(object.boolOpenHardwareCodec)
        ? globalThis.Boolean(object.boolOpenHardwareCodec)
        : undefined,
      boolSendAheadSignal: isSet(object.boolSendAheadSignal)
        ? globalThis.Boolean(object.boolSendAheadSignal)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501RspbodyShortVideoConf): unknown {
    const obj: any = {};
    if (message.uint32ChannelType !== undefined) {
      obj.uint32ChannelType = Math.round(message.uint32ChannelType);
    }
    if (message.rptMsgNetsegconf?.length) {
      obj.rptMsgNetsegconf = message.rptMsgNetsegconf.map((e) => SubCmd0x501RspbodyNetSegConf.toJSON(e));
    }
    if (message.boolOpenHardwareCodec !== undefined) {
      obj.boolOpenHardwareCodec = message.boolOpenHardwareCodec;
    }
    if (message.boolSendAheadSignal !== undefined) {
      obj.boolSendAheadSignal = message.boolSendAheadSignal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodyShortVideoConf>, I>>(
    base?: I,
  ): SubCmd0x501RspbodyShortVideoConf {
    return SubCmd0x501RspbodyShortVideoConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodyShortVideoConf>, I>>(
    object: I,
  ): SubCmd0x501RspbodyShortVideoConf {
    const message = createBaseSubCmd0x501RspbodyShortVideoConf();
    message.uint32ChannelType = object.uint32ChannelType ?? undefined;
    message.rptMsgNetsegconf = object.rptMsgNetsegconf?.map((e) => SubCmd0x501RspbodyNetSegConf.fromPartial(e)) || [];
    message.boolOpenHardwareCodec = object.boolOpenHardwareCodec ?? undefined;
    message.boolSendAheadSignal = object.boolSendAheadSignal ?? undefined;
    return message;
  },
};

function createBaseSubCmd0x501RspbodySrvAddrs(): SubCmd0x501RspbodySrvAddrs {
  return {
    uint32ServiceType: undefined,
    rptMsgAddrs: [],
    uint32FragmentSize: undefined,
    rptMsgNetsegconf: [],
    rptMsgAddrsV6: [],
  };
}

export const SubCmd0x501RspbodySrvAddrs: MessageFns<SubCmd0x501RspbodySrvAddrs> = {
  encode(message: SubCmd0x501RspbodySrvAddrs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uint32ServiceType !== undefined) {
      writer.uint32(8).uint32(message.uint32ServiceType);
    }
    for (const v of message.rptMsgAddrs) {
      SubCmd0x501RspbodyIpAddr.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.uint32FragmentSize !== undefined) {
      writer.uint32(24).uint32(message.uint32FragmentSize);
    }
    for (const v of message.rptMsgNetsegconf) {
      SubCmd0x501RspbodyNetSegConf.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.rptMsgAddrsV6) {
      SubCmd0x501RspbodyIp6Addr.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501RspbodySrvAddrs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501RspbodySrvAddrs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.uint32ServiceType = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rptMsgAddrs.push(SubCmd0x501RspbodyIpAddr.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.uint32FragmentSize = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rptMsgNetsegconf.push(SubCmd0x501RspbodyNetSegConf.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rptMsgAddrsV6.push(SubCmd0x501RspbodyIp6Addr.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501RspbodySrvAddrs {
    return {
      uint32ServiceType: isSet(object.uint32ServiceType) ? globalThis.Number(object.uint32ServiceType) : undefined,
      rptMsgAddrs: globalThis.Array.isArray(object?.rptMsgAddrs)
        ? object.rptMsgAddrs.map((e: any) => SubCmd0x501RspbodyIpAddr.fromJSON(e))
        : [],
      uint32FragmentSize: isSet(object.uint32FragmentSize) ? globalThis.Number(object.uint32FragmentSize) : undefined,
      rptMsgNetsegconf: globalThis.Array.isArray(object?.rptMsgNetsegconf)
        ? object.rptMsgNetsegconf.map((e: any) => SubCmd0x501RspbodyNetSegConf.fromJSON(e))
        : [],
      rptMsgAddrsV6: globalThis.Array.isArray(object?.rptMsgAddrsV6)
        ? object.rptMsgAddrsV6.map((e: any) => SubCmd0x501RspbodyIp6Addr.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SubCmd0x501RspbodySrvAddrs): unknown {
    const obj: any = {};
    if (message.uint32ServiceType !== undefined) {
      obj.uint32ServiceType = Math.round(message.uint32ServiceType);
    }
    if (message.rptMsgAddrs?.length) {
      obj.rptMsgAddrs = message.rptMsgAddrs.map((e) => SubCmd0x501RspbodyIpAddr.toJSON(e));
    }
    if (message.uint32FragmentSize !== undefined) {
      obj.uint32FragmentSize = Math.round(message.uint32FragmentSize);
    }
    if (message.rptMsgNetsegconf?.length) {
      obj.rptMsgNetsegconf = message.rptMsgNetsegconf.map((e) => SubCmd0x501RspbodyNetSegConf.toJSON(e));
    }
    if (message.rptMsgAddrsV6?.length) {
      obj.rptMsgAddrsV6 = message.rptMsgAddrsV6.map((e) => SubCmd0x501RspbodyIp6Addr.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501RspbodySrvAddrs>, I>>(base?: I): SubCmd0x501RspbodySrvAddrs {
    return SubCmd0x501RspbodySrvAddrs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501RspbodySrvAddrs>, I>>(object: I): SubCmd0x501RspbodySrvAddrs {
    const message = createBaseSubCmd0x501RspbodySrvAddrs();
    message.uint32ServiceType = object.uint32ServiceType ?? undefined;
    message.rptMsgAddrs = object.rptMsgAddrs?.map((e) => SubCmd0x501RspbodyIpAddr.fromPartial(e)) || [];
    message.uint32FragmentSize = object.uint32FragmentSize ?? undefined;
    message.rptMsgNetsegconf = object.rptMsgNetsegconf?.map((e) => SubCmd0x501RspbodyNetSegConf.fromPartial(e)) || [];
    message.rptMsgAddrsV6 = object.rptMsgAddrsV6?.map((e) => SubCmd0x501RspbodyIp6Addr.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSubCmd0x501Rspbody(): SubCmd0x501Rspbody {
  return {
    bytesHttpconnSigSession: undefined,
    bytesSessionKey: undefined,
    rptMsgHttpconnAddrs: [],
    uint32PreConnection: undefined,
    uint32CsConn: undefined,
    msgIpLearnConf: undefined,
    msgDynTimeoutConf: undefined,
    msgOpenUpConf: undefined,
    msgDownloadEncryptConf: undefined,
    msgShortVideoConf: undefined,
    msgPtvConf: undefined,
    uint32ShareType: undefined,
    uint32ShareChannel: undefined,
    uint32FmtPolicy: undefined,
    uint32BigdataPolicy: undefined,
    uint32ConnAttemptDelay: undefined,
  };
}

export const SubCmd0x501Rspbody: MessageFns<SubCmd0x501Rspbody> = {
  encode(message: SubCmd0x501Rspbody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bytesHttpconnSigSession !== undefined) {
      writer.uint32(10).bytes(message.bytesHttpconnSigSession);
    }
    if (message.bytesSessionKey !== undefined) {
      writer.uint32(18).bytes(message.bytesSessionKey);
    }
    for (const v of message.rptMsgHttpconnAddrs) {
      SubCmd0x501RspbodySrvAddrs.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.uint32PreConnection !== undefined) {
      writer.uint32(32).uint32(message.uint32PreConnection);
    }
    if (message.uint32CsConn !== undefined) {
      writer.uint32(40).uint32(message.uint32CsConn);
    }
    if (message.msgIpLearnConf !== undefined) {
      SubCmd0x501RspbodyIpLearnConf.encode(message.msgIpLearnConf, writer.uint32(50).fork()).join();
    }
    if (message.msgDynTimeoutConf !== undefined) {
      SubCmd0x501RspbodyDynTimeOutConf.encode(message.msgDynTimeoutConf, writer.uint32(58).fork()).join();
    }
    if (message.msgOpenUpConf !== undefined) {
      SubCmd0x501RspbodyOpenUpConf.encode(message.msgOpenUpConf, writer.uint32(66).fork()).join();
    }
    if (message.msgDownloadEncryptConf !== undefined) {
      SubCmd0x501RspbodyDownloadEncryptConf.encode(message.msgDownloadEncryptConf, writer.uint32(74).fork()).join();
    }
    if (message.msgShortVideoConf !== undefined) {
      SubCmd0x501RspbodyShortVideoConf.encode(message.msgShortVideoConf, writer.uint32(82).fork()).join();
    }
    if (message.msgPtvConf !== undefined) {
      SubCmd0x501RspbodyPTVConf.encode(message.msgPtvConf, writer.uint32(90).fork()).join();
    }
    if (message.uint32ShareType !== undefined) {
      writer.uint32(96).uint32(message.uint32ShareType);
    }
    if (message.uint32ShareChannel !== undefined) {
      writer.uint32(104).uint32(message.uint32ShareChannel);
    }
    if (message.uint32FmtPolicy !== undefined) {
      writer.uint32(112).uint32(message.uint32FmtPolicy);
    }
    if (message.uint32BigdataPolicy !== undefined) {
      writer.uint32(120).uint32(message.uint32BigdataPolicy);
    }
    if (message.uint32ConnAttemptDelay !== undefined) {
      writer.uint32(128).uint32(message.uint32ConnAttemptDelay);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubCmd0x501Rspbody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubCmd0x501Rspbody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bytesHttpconnSigSession = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bytesSessionKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rptMsgHttpconnAddrs.push(SubCmd0x501RspbodySrvAddrs.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.uint32PreConnection = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.uint32CsConn = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.msgIpLearnConf = SubCmd0x501RspbodyIpLearnConf.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.msgDynTimeoutConf = SubCmd0x501RspbodyDynTimeOutConf.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.msgOpenUpConf = SubCmd0x501RspbodyOpenUpConf.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.msgDownloadEncryptConf = SubCmd0x501RspbodyDownloadEncryptConf.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.msgShortVideoConf = SubCmd0x501RspbodyShortVideoConf.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.msgPtvConf = SubCmd0x501RspbodyPTVConf.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.uint32ShareType = reader.uint32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.uint32ShareChannel = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.uint32FmtPolicy = reader.uint32();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.uint32BigdataPolicy = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.uint32ConnAttemptDelay = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubCmd0x501Rspbody {
    return {
      bytesHttpconnSigSession: isSet(object.bytesHttpconnSigSession)
        ? bytesFromBase64(object.bytesHttpconnSigSession)
        : undefined,
      bytesSessionKey: isSet(object.bytesSessionKey) ? bytesFromBase64(object.bytesSessionKey) : undefined,
      rptMsgHttpconnAddrs: globalThis.Array.isArray(object?.rptMsgHttpconnAddrs)
        ? object.rptMsgHttpconnAddrs.map((e: any) => SubCmd0x501RspbodySrvAddrs.fromJSON(e))
        : [],
      uint32PreConnection: isSet(object.uint32PreConnection)
        ? globalThis.Number(object.uint32PreConnection)
        : undefined,
      uint32CsConn: isSet(object.uint32CsConn) ? globalThis.Number(object.uint32CsConn) : undefined,
      msgIpLearnConf: isSet(object.msgIpLearnConf)
        ? SubCmd0x501RspbodyIpLearnConf.fromJSON(object.msgIpLearnConf)
        : undefined,
      msgDynTimeoutConf: isSet(object.msgDynTimeoutConf)
        ? SubCmd0x501RspbodyDynTimeOutConf.fromJSON(object.msgDynTimeoutConf)
        : undefined,
      msgOpenUpConf: isSet(object.msgOpenUpConf)
        ? SubCmd0x501RspbodyOpenUpConf.fromJSON(object.msgOpenUpConf)
        : undefined,
      msgDownloadEncryptConf: isSet(object.msgDownloadEncryptConf)
        ? SubCmd0x501RspbodyDownloadEncryptConf.fromJSON(object.msgDownloadEncryptConf)
        : undefined,
      msgShortVideoConf: isSet(object.msgShortVideoConf)
        ? SubCmd0x501RspbodyShortVideoConf.fromJSON(object.msgShortVideoConf)
        : undefined,
      msgPtvConf: isSet(object.msgPtvConf) ? SubCmd0x501RspbodyPTVConf.fromJSON(object.msgPtvConf) : undefined,
      uint32ShareType: isSet(object.uint32ShareType) ? globalThis.Number(object.uint32ShareType) : undefined,
      uint32ShareChannel: isSet(object.uint32ShareChannel) ? globalThis.Number(object.uint32ShareChannel) : undefined,
      uint32FmtPolicy: isSet(object.uint32FmtPolicy) ? globalThis.Number(object.uint32FmtPolicy) : undefined,
      uint32BigdataPolicy: isSet(object.uint32BigdataPolicy)
        ? globalThis.Number(object.uint32BigdataPolicy)
        : undefined,
      uint32ConnAttemptDelay: isSet(object.uint32ConnAttemptDelay)
        ? globalThis.Number(object.uint32ConnAttemptDelay)
        : undefined,
    };
  },

  toJSON(message: SubCmd0x501Rspbody): unknown {
    const obj: any = {};
    if (message.bytesHttpconnSigSession !== undefined) {
      obj.bytesHttpconnSigSession = base64FromBytes(message.bytesHttpconnSigSession);
    }
    if (message.bytesSessionKey !== undefined) {
      obj.bytesSessionKey = base64FromBytes(message.bytesSessionKey);
    }
    if (message.rptMsgHttpconnAddrs?.length) {
      obj.rptMsgHttpconnAddrs = message.rptMsgHttpconnAddrs.map((e) => SubCmd0x501RspbodySrvAddrs.toJSON(e));
    }
    if (message.uint32PreConnection !== undefined) {
      obj.uint32PreConnection = Math.round(message.uint32PreConnection);
    }
    if (message.uint32CsConn !== undefined) {
      obj.uint32CsConn = Math.round(message.uint32CsConn);
    }
    if (message.msgIpLearnConf !== undefined) {
      obj.msgIpLearnConf = SubCmd0x501RspbodyIpLearnConf.toJSON(message.msgIpLearnConf);
    }
    if (message.msgDynTimeoutConf !== undefined) {
      obj.msgDynTimeoutConf = SubCmd0x501RspbodyDynTimeOutConf.toJSON(message.msgDynTimeoutConf);
    }
    if (message.msgOpenUpConf !== undefined) {
      obj.msgOpenUpConf = SubCmd0x501RspbodyOpenUpConf.toJSON(message.msgOpenUpConf);
    }
    if (message.msgDownloadEncryptConf !== undefined) {
      obj.msgDownloadEncryptConf = SubCmd0x501RspbodyDownloadEncryptConf.toJSON(message.msgDownloadEncryptConf);
    }
    if (message.msgShortVideoConf !== undefined) {
      obj.msgShortVideoConf = SubCmd0x501RspbodyShortVideoConf.toJSON(message.msgShortVideoConf);
    }
    if (message.msgPtvConf !== undefined) {
      obj.msgPtvConf = SubCmd0x501RspbodyPTVConf.toJSON(message.msgPtvConf);
    }
    if (message.uint32ShareType !== undefined) {
      obj.uint32ShareType = Math.round(message.uint32ShareType);
    }
    if (message.uint32ShareChannel !== undefined) {
      obj.uint32ShareChannel = Math.round(message.uint32ShareChannel);
    }
    if (message.uint32FmtPolicy !== undefined) {
      obj.uint32FmtPolicy = Math.round(message.uint32FmtPolicy);
    }
    if (message.uint32BigdataPolicy !== undefined) {
      obj.uint32BigdataPolicy = Math.round(message.uint32BigdataPolicy);
    }
    if (message.uint32ConnAttemptDelay !== undefined) {
      obj.uint32ConnAttemptDelay = Math.round(message.uint32ConnAttemptDelay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubCmd0x501Rspbody>, I>>(base?: I): SubCmd0x501Rspbody {
    return SubCmd0x501Rspbody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubCmd0x501Rspbody>, I>>(object: I): SubCmd0x501Rspbody {
    const message = createBaseSubCmd0x501Rspbody();
    message.bytesHttpconnSigSession = object.bytesHttpconnSigSession ?? undefined;
    message.bytesSessionKey = object.bytesSessionKey ?? undefined;
    message.rptMsgHttpconnAddrs = object.rptMsgHttpconnAddrs?.map((e) => SubCmd0x501RspbodySrvAddrs.fromPartial(e)) ||
      [];
    message.uint32PreConnection = object.uint32PreConnection ?? undefined;
    message.uint32CsConn = object.uint32CsConn ?? undefined;
    message.msgIpLearnConf = (object.msgIpLearnConf !== undefined && object.msgIpLearnConf !== null)
      ? SubCmd0x501RspbodyIpLearnConf.fromPartial(object.msgIpLearnConf)
      : undefined;
    message.msgDynTimeoutConf = (object.msgDynTimeoutConf !== undefined && object.msgDynTimeoutConf !== null)
      ? SubCmd0x501RspbodyDynTimeOutConf.fromPartial(object.msgDynTimeoutConf)
      : undefined;
    message.msgOpenUpConf = (object.msgOpenUpConf !== undefined && object.msgOpenUpConf !== null)
      ? SubCmd0x501RspbodyOpenUpConf.fromPartial(object.msgOpenUpConf)
      : undefined;
    message.msgDownloadEncryptConf =
      (object.msgDownloadEncryptConf !== undefined && object.msgDownloadEncryptConf !== null)
        ? SubCmd0x501RspbodyDownloadEncryptConf.fromPartial(object.msgDownloadEncryptConf)
        : undefined;
    message.msgShortVideoConf = (object.msgShortVideoConf !== undefined && object.msgShortVideoConf !== null)
      ? SubCmd0x501RspbodyShortVideoConf.fromPartial(object.msgShortVideoConf)
      : undefined;
    message.msgPtvConf = (object.msgPtvConf !== undefined && object.msgPtvConf !== null)
      ? SubCmd0x501RspbodyPTVConf.fromPartial(object.msgPtvConf)
      : undefined;
    message.uint32ShareType = object.uint32ShareType ?? undefined;
    message.uint32ShareChannel = object.uint32ShareChannel ?? undefined;
    message.uint32FmtPolicy = object.uint32FmtPolicy ?? undefined;
    message.uint32BigdataPolicy = object.uint32BigdataPolicy ?? undefined;
    message.uint32ConnAttemptDelay = object.uint32ConnAttemptDelay ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
